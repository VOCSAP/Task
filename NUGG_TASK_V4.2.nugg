<?xml version="1.0" encoding="utf-8"?>
<nugget name="TASK_V5.1">
 <CLAS CLSNAME="ZCL_TASK" VERSION="1" LANGU="F" DESCRIPT="Instance Tâche" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" MSG_ID="ZTASK" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <types CLSNAME="ZCL_TASK" CMPNAME="TY_FUPARAREF" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="4 " SRCCOLUMN1="4 " SRCROW2="9 " SRCCOLUMN2="24 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_fupararef,
      funcname  TYPE fupararef-funcname,
      parameter TYPE fupararef-parameter,
      paramtype TYPE fupararef-paramtype,
      structure TYPE fupararef-structure,
    END OF   ty_fupararef
"/>
  <types CLSNAME="ZCL_TASK" CMPNAME="TY_T_FUPARAREF" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="4 " SRCROW2="12 " SRCCOLUMN2="80 " TYPESRC_LENG="0 " TYPESRC="ty_t_fupararef TYPE SORTED TABLE OF ty_fupararef
                        WITH UNIQUE KEY primary_key COMPONENTS funcname parameter
"/>
  <types CLSNAME="ZCL_TASK" CMPNAME="TY_TASK_PROCESS" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="6 " SRCROW2="16 " SRCCOLUMN2="29 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_task_process,
        function_name  TYPE        funcname,
        task_container TYPE REF TO zcl_task_container,
*        function_parameters_output TYPE zif_task_constant=&gt;ty_t_function_parameters,
*        t_attached_data            TYPE zif_task_constant=&gt;ty_t_task_attached_data,
      END OF   ty_task_process
"/>
  <types CLSNAME="ZCL_TASK" CMPNAME="TY_TASK" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="18 " SRCCOLUMN1="6 " SRCROW2="25 " SRCCOLUMN2="21 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_task,
        task_id           TYPE sysuuid_c32,
        task_running      TYPE flag,
        task_grfc         TYPE rfcgr,
        task_dedicated    TYPE flag,
        task_process      TYPE ty_task_process,
        use_default_group TYPE flag,
      END OF   ty_task
"/>
  <friends CLSNAME="ZCL_TASK" REFCLSNAME="ZCL_TASK_MANAGER" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <events CLSNAME="ZCL_TASK" CMPNAME="TASK_END" VERSION="1" LANGU="F" DESCRIPT="Evènement Fin de la Tâche" EXPOSURE="0" STATE="1" EDITORDER="1 " EVTDECLTYP="0" BCEVTCAT="00">
   <parameter CLSNAME="ZCL_TASK" CMPNAME="TASK_END" SCONAME="IO_TASK" VERSION="1" LANGU="F" CMPTYPE="2" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TASK"/>
  </events>
  <events CLSNAME="ZCL_TASK" CMPNAME="TASK_ERROR_RECEIVE_RESULT" VERSION="1" LANGU="F" DESCRIPT="Evènement erreur réception résultalt Tâche" EXPOSURE="0" STATE="1" EDITORDER="2 " EVTDECLTYP="0" BCEVTCAT="00">
   <parameter CLSNAME="ZCL_TASK" CMPNAME="TASK_ERROR_RECEIVE_RESULT" SCONAME="IO_TASK" VERSION="1" LANGU="F" DESCRIPT="Instance Tâche" CMPTYPE="2" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TASK"/>
   <parameter CLSNAME="ZCL_TASK" CMPNAME="TASK_ERROR_RECEIVE_RESULT" SCONAME="IS_TEXTID" VERSION="1" LANGU="F" DESCRIPT="Clé T100 avec mappage des paramètres pour attributs de nom" CMPTYPE="2" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="SCX_T100KEY" PAROPTIONL="X"/>
  </events>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_TASK" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <typeUsage CLSNAME="ZCL_TASK" TYPEGROUP="SANA" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>SANA</forwardDeclaration>
  <attribute CLSNAME="ZCL_TASK" CMPNAME="MS_TASK_DATA" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TY_TASK" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TASK" CMPNAME="MT_FUPARAREF" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TY_T_FUPARAREF" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TASK" CMPNAME="MT_GENERIC_TYPE_LIST" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SANA_TYPE_LIST" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_TASK" CMPNAME="AT_END_OF_TASK" VERSION="1" LANGU="F" DESCRIPT="Traitement : At End Of Task (fin Tâche arrière-plan)" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK" CMPNAME="AT_END_OF_TASK" SCONAME="P_TASK" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CLIKE"/>
   <exception CLSNAME="ZCL_TASK" CMPNAME="AT_END_OF_TASK" SCONAME="ZCX_TASK" VERSION="1" LANGU="F" DESCRIPT="Classe Exception Tâche" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD at_end_of_task.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : AT_END_OF_TASK                                    *
*&amp; Classe          : ZCL_TASK_MANAGER                                  *
*&amp; Description     : Méthode appelé lorsque le traitement // est finis *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                             TABLES                                 **
***------------------------------------------------------------------***
  DATA :
    lt_result TYPE ztec_t_function_parameters.

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_textid TYPE scx_t100key.

***------------------------------------------------------------------***
**                            VARIABLES                               **
***------------------------------------------------------------------***
  DATA :
    lv_message TYPE c LENGTH 255.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Récupération des données
  &quot; -----------------------------------------------------------

  &quot; Récupération des données issues du MF
  RECEIVE RESULTS FROM FUNCTION &apos;Z_TASK_CALL_PROCESS&apos;
    IMPORTING
      et_result             = lt_result
    EXCEPTIONS
      system_failure        = 1 MESSAGE lv_message
      communication_failure = 2 MESSAGE lv_message
      resource_failure      = 3
      OTHERS                = 4.
  IF sy-subrc EQ 0.
    &quot; Données correctement récupérée
    &quot;&quot;  --&gt; Appel méthode fin de traitement
    me-&gt;__at_end_of_task( lt_result ).

  ELSE.
    &quot; Une erreur est survenue
    &quot;&quot;  --&gt; Lève une Exception
    ls_textid-msgid = sy-msgid.
    ls_textid-msgno = sy-msgno.
    ls_textid-attr1 = sy-msgv1.
    ls_textid-attr2 = sy-msgv2.
    ls_textid-attr3 = sy-msgv3.
    ls_textid-attr4 = sy-msgv4.
    RAISE EVENT task_error_receive_result &quot;(à destination de ZCL_TASK_MANAGER)
      EXPORTING
        io_task   = me
        is_textid = ls_textid.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="F" DESCRIPT="CONSTRUCTOR" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK" CMPNAME="CONSTRUCTOR" SCONAME="IV_GRFC" VERSION="1" LANGU="F" DESCRIPT="Groupe de serveurs RFC pour traitement paralléle" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCGR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK" CMPNAME="CONSTRUCTOR" SCONAME="IV_FUNCTION_NAME" VERSION="1" LANGU="F" DESCRIPT="Nom de fonction" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CLIKE" PAROPTIONL="X"/>
   <exception CLSNAME="ZCL_TASK" CMPNAME="CONSTRUCTOR" SCONAME="ZCX_TASK" VERSION="1" LANGU="F" DESCRIPT="Classe Exception Tâche" MTDTYPE="2" EDITORDER="1 "/>
   <source>METHOD constructor.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : CONSTRUCTOR                                       *
*&amp; Classe          : ZCL_TASK                                          *
*&amp; Description     : Constructeur instance                             *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_type_list TYPE sana_type_struct.

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_cx_task TYPE REF TO zcx_task.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Note d&apos;utilisation :
  &quot;   Si le MF est transmis, la Tâche sera dédié à  ce MF, dans
  &quot;     ce cas le paramètre d&apos;appel &quot;IV_FUNCTION_NAME&quot;
  &quot;     de la méthode &quot;TASK_START&quot; n&apos;est pas utilisé
  &quot;   Dans le cas contraire, il est obligatoire !
  &quot; -----------------------------------------------------------

  &quot; -----------------------------------------------------------
  &quot; Détermination des types prédéfinis
  &quot; -----------------------------------------------------------

  IF zcl_task=&gt;mt_generic_type_list[] IS INITIAL.
    CLEAR : ls_type_list.
    ls_type_list-name = &apos;DATE&apos;.                             &quot;#EC NOTEXT
    ls_type_list-is_generic = cl_abap_typedescr=&gt;kind_elem.
    APPEND ls_type_list TO zcl_task=&gt;mt_generic_type_list.
    CLEAR : ls_type_list.
    ls_type_list-name = &apos;CLIKE&apos;.                            &quot;#EC NOTEXT
    ls_type_list-is_generic = cl_abap_typedescr=&gt;kind_elem.
    APPEND ls_type_list TO zcl_task=&gt;mt_generic_type_list.
    CLEAR : ls_type_list.
    ls_type_list-name = &apos;NUMERIC&apos;.                          &quot;#EC NOTEXT
    ls_type_list-is_generic = cl_abap_typedescr=&gt;kind_elem.
    APPEND ls_type_list TO zcl_task=&gt;mt_generic_type_list.
    CLEAR : ls_type_list.
    ls_type_list-name = &apos;CSEQUENCE&apos;.                        &quot;#EC NOTEXT
    ls_type_list-is_generic = cl_abap_typedescr=&gt;kind_elem.
    APPEND ls_type_list TO zcl_task=&gt;mt_generic_type_list.
    CLEAR : ls_type_list.
    ls_type_list-name = &apos;ANY&apos;.                              &quot;#EC NOTEXT
    ls_type_list-is_generic = cl_abap_typedescr=&gt;kind_struct.
    APPEND ls_type_list TO zcl_task=&gt;mt_generic_type_list.
    CLEAR : ls_type_list.
    ls_type_list-name = &apos;INDEX TABLE&apos;.                      &quot;#EC NOTEXT
    ls_type_list-is_generic = cl_abap_typedescr=&gt;kind_table.
    APPEND ls_type_list TO zcl_task=&gt;mt_generic_type_list.
    CLEAR : ls_type_list.
    ls_type_list-name = &apos;SORTED TABLE&apos;.                     &quot;#EC NOTEXT
    ls_type_list-is_generic = cl_abap_typedescr=&gt;kind_table.
    APPEND ls_type_list TO zcl_task=&gt;mt_generic_type_list.
    CLEAR : ls_type_list.
    ls_type_list-name = &apos;HASHED TABLE&apos;.                     &quot;#EC NOTEXT
    ls_type_list-is_generic = cl_abap_typedescr=&gt;kind_table.
    APPEND ls_type_list TO zcl_task=&gt;mt_generic_type_list.
    CLEAR : ls_type_list.
    ls_type_list-name = &apos;STANDARD TABLE&apos;.                   &quot;#EC NOTEXT
    ls_type_list-is_generic = cl_abap_typedescr=&gt;kind_table.
    APPEND ls_type_list TO zcl_task=&gt;mt_generic_type_list.

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Création instance de Tâche
  &quot; -----------------------------------------------------------

  TRY.
      &quot; Génération ID de Tâche Unique
      me-&gt;ms_task_data-task_id = cl_system_uuid=&gt;create_uuid_c32_static( ).

    CATCH cx_uuid_error.
      &quot; Erreur génération GUID unique
      &quot;&quot;  --&gt; Génération ID aléatoire
      me-&gt;ms_task_data-task_id = |{ sy-datum }{ sy-uzeit }|.

  ENDTRY.

  &quot; Initialisation Groupe de Serveur
  IF NOT iv_grfc IS INITIAL.
    &quot; Groupe de Serveur spécifié
    me-&gt;ms_task_data-task_grfc = iv_grfc.

  ELSE.
    &quot; Utilisation Groupe de Serveur par défaut
    me-&gt;ms_task_data-use_default_group = abap_true.

  ENDIF.

  IF      iv_function_name IS SUPPLIED
  AND NOT iv_function_name IS INITIAL.
    &quot; Restriction sur un MF
    &quot;&quot;  --&gt; Initialisation Nom Module Fonction
    me-&gt;ms_task_data-task_process-function_name = iv_function_name.

    &quot;&quot;  --&gt; Initialisation indicateur Tâche dédiée
    me-&gt;ms_task_data-task_dedicated = abap_true.

    TRY.
        &quot;&quot;  --&gt; Récupération des paramètres du MF
        me-&gt;function_get_call_parameters( iv_function_name ).

      CATCH zcx_task INTO lo_cx_task.
        &quot; Erreur lors de la récupération des paramètres d&apos;appel
        RAISE EXCEPTION TYPE zcx_task
          EXPORTING
            previous = lo_cx_task.

    ENDTRY.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK" CMPNAME="CONVERT_DYNAMIC_PARAMETERS" VERSION="1" LANGU="F" DESCRIPT="Conversion données paramètres dynamique en statique" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK" CMPNAME="CONVERT_DYNAMIC_PARAMETERS" SCONAME="IT_FUNCTION_PARAMETERS_DYNAMIC" VERSION="1" LANGU="F" DESCRIPT="Table des paramètres Dynamique" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIF_TASK_CONSTANT=&gt;TY_T_FUNCTION_PARAMETERS"/>
   <parameter CLSNAME="ZCL_TASK" CMPNAME="CONVERT_DYNAMIC_PARAMETERS" SCONAME="RT_FUNCTION_PARAMETERS_STATIC" VERSION="1" LANGU="F" DESCRIPT="Type de table paramètre d&apos;appel Statique" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZTEC_T_FUNCTION_PARAMETERS"/>
   <exception CLSNAME="ZCL_TASK" CMPNAME="CONVERT_DYNAMIC_PARAMETERS" SCONAME="ZCX_TASK" VERSION="1" LANGU="F" DESCRIPT="Classe Exception Tâche" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD convert_dynamic_parameters.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : CONVERT_DYNAMIC_PARAMETERS                        *
*&amp; Classe          : ZCL_TASK                                          *
*&amp; Description     : Convertis les données des paramètres &quot;dynamique&quot;  *
*                    en données &quot;statiques&quot;                            *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                             TABLES                                 **
***------------------------------------------------------------------***
  DATA :
    lot_table TYPE REF TO data.

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_function_parameters_static TYPE ztec_s_function_parameters.

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_type_descr      TYPE REF TO cl_abap_typedescr,
    lo_cx_exception    TYPE REF TO cx_root,
    lo_type_definition TYPE REF TO zcl_type_definition.

  DATA :
    lo_datadescr  TYPE REF TO cl_abap_datadescr,
    lo_tabledescr TYPE REF TO cl_abap_tabledescr.

***------------------------------------------------------------------***
**                          FIELD-SYMBOLS                             **
***------------------------------------------------------------------***
  FIELD-SYMBOLS :
    &lt;lfs_parameter_data&gt; TYPE any.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  FREE : rt_function_parameters_static.

  IF it_function_parameters_dynamic[] IS INITIAL.
    &quot; Rien à  traiter
    &quot;&quot;  --&gt; Arrêt du traitement
    RETURN.

  ENDIF.

  &quot; Parcours l&apos;ensemble des paramètres &quot;dynamiques&quot;
  LOOP AT it_function_parameters_dynamic ASSIGNING FIELD-SYMBOL(&lt;lfs_s_function_parameters&gt;).

    CLEAR    : ls_function_parameters_static, lo_type_descr.
    UNASSIGN : &lt;lfs_parameter_data&gt;.

    &quot; Initialisation Nom du Paramètre
    ls_function_parameters_static-parameter_name = &lt;lfs_s_function_parameters&gt;-parameter_name.

    &quot; Récupération données du paramètre
    READ TABLE me-&gt;mt_fupararef WITH TABLE KEY funcname  = me-&gt;ms_task_data-task_process-function_name
                                               parameter = CONV fupararef-parameter( &lt;lfs_s_function_parameters&gt;-parameter_name )
                                     ASSIGNING FIELD-SYMBOL(&lt;lfs_s_fupararef&gt;).
    IF sy-subrc EQ 0.
      TRY.
          &quot; Initialisation type du paramètre
          ls_function_parameters_static-parameter_kind = SWITCH string( &lt;lfs_s_fupararef&gt;-paramtype
                                                                          WHEN &apos;I&apos; THEN zif_task_constant=&gt;mc_parameter_kind_exporting &quot;#EC NOTEXT
                                                                          WHEN &apos;E&apos; THEN zif_task_constant=&gt;mc_parameter_kind_importing &quot;#EC NOTEXT
                                                                          WHEN &apos;T&apos; THEN zif_task_constant=&gt;mc_parameter_kind_tables &quot;#EC NOTEXT
                                                                          WHEN &apos;C&apos; THEN zif_task_constant=&gt;mc_parameter_kind_changing &quot;#EC NOTEXT
                                                                          ELSE THROW cx_sy_arg_out_of_domain( )
                                                                      ).
        CATCH cx_sy_arg_out_of_domain.
          &quot; Autre valeur
          IF &lt;lfs_s_fupararef&gt;-paramtype EQ &apos;X&apos;.
            &quot; Cas d&apos;une Exception
            ls_function_parameters_static-parameter_kind = zif_task_constant=&gt;mc_parameter_kind_exception.
            INSERT ls_function_parameters_static INTO TABLE rt_function_parameters_static.

          ENDIF.

          &quot;&quot;  --&gt; Passe à  l&apos;itération suivante
          CONTINUE.

      ENDTRY.

      &quot; Récupération définition type du paramètre
      cl_abap_typedescr=&gt;describe_by_name(
        EXPORTING
          p_name         = &lt;lfs_s_fupararef&gt;-structure
        RECEIVING
          p_descr_ref    = lo_type_descr
        EXCEPTIONS
          type_not_found = 1
          OTHERS         = 2
      ).
      IF sy-subrc NE 0.
        &quot; Une erreur est survenue (cas du &quot;ANY TABLE&quot; par exemple)
        CLEAR : lo_type_descr.

      ENDIF.

      IF &lt;lfs_s_function_parameters&gt;-parameter_data IS BOUND.
        &quot; Initialisation pointeur sur les données
        ASSIGN &lt;lfs_s_function_parameters&gt;-parameter_data-&gt;* TO &lt;lfs_parameter_data&gt;.

      ELSEIF &lt;lfs_s_fupararef&gt;-paramtype EQ &apos;T&apos;.            &quot;#EC NOTEXT
        &quot; Paramètre Type Table et non transmis
        &quot;&quot;  --&gt; Création du Type de table
        TRY.
            &quot; Création Type de Table
            lo_datadescr ?= lo_type_descr.
            lo_tabledescr = cl_abap_tabledescr=&gt;create( p_line_type = lo_datadescr ).

            &quot; Initialisation Pointeur sur les données
            CREATE DATA lot_table TYPE HANDLE lo_tabledescr.
            ASSIGN lot_table-&gt;* TO &lt;lfs_parameter_data&gt;.

          CATCH cx_sy_table_creation.
            &quot; Erreur lors de la création du Type
            &quot;&quot;  --&gt; Force la provocation d&apos;un DUMP
            MESSAGE x005(ztask) WITH me-&gt;ms_task_data-task_id &lt;lfs_s_function_parameters&gt;-parameter_name.

        ENDTRY.

      ENDIF.

      &quot; Traitement cas particulier des types génériques
      READ TABLE zcl_task=&gt;mt_generic_type_list WITH KEY name = &lt;lfs_s_fupararef&gt;-structure
                                            TRANSPORTING NO FIELDS.
      IF sy-subrc EQ 0 OR NOT lo_type_descr IS BOUND OR lo_type_descr-&gt;is_ddic_type( ) EQ abap_false.
        &quot; Type générique ou pas du dictionnaire
        &quot;&quot;  --&gt; Contrôle supplémentaire
        IF  NOT &lt;lfs_parameter_data&gt; IS ASSIGNED
        AND &lt;lfs_s_function_parameters&gt;-type_for_none_ddic_parameter IS INITIAL.
          &quot; Aucun moyen de déterminer le type
          &quot;&quot;  --&gt; Force la provocation d&apos;un DUMP
          MESSAGE x005(ztask) WITH me-&gt;ms_task_data-task_id &lt;lfs_s_function_parameters&gt;-parameter_name.

        ELSEIF NOT &lt;lfs_s_function_parameters&gt;-type_for_none_ddic_parameter IS INITIAL.
          lo_type_descr = cl_abap_typedescr=&gt;describe_by_name( &lt;lfs_s_function_parameters&gt;-type_for_none_ddic_parameter ).

        ELSEIF &lt;lfs_parameter_data&gt; IS ASSIGNED.
          lo_type_descr = cl_abap_typedescr=&gt;describe_by_data( &lt;lfs_parameter_data&gt; ).

        ELSE.
          &quot; Nous n&apos;irons jamais ici, mais au moins il est présent
          &quot;&quot;  --&gt; Force la provocation d&apos;un DUMP
          MESSAGE x005(ztask) WITH me-&gt;ms_task_data-task_id &lt;lfs_s_function_parameters&gt;-parameter_name.

        ENDIF.

        TRY.
            IF NOT lo_type_definition IS BOUND.
              &quot; Récupération de l&apos;instance courante
              lo_type_definition = zcl_type_definition=&gt;get_instance( ).

            ENDIF.

            &quot; Ajout de la définition
            lo_type_definition-&gt;definition_type_add( io_definition = lo_type_descr ).

          CATCH cx_root.
            &quot; Une erreur est survenue lors de l&apos;utilisation de la mémoire partagée

        ENDTRY.

      ENDIF.

      &quot; Initialisation type (ABAP) de données
      IF &lt;lfs_s_fupararef&gt;-paramtype EQ &apos;T&apos;.                &quot;#EC NOTEXT
        &quot; Paramètre d&apos;appel de type &quot;Table&quot;
        &quot;&quot;  --&gt; Force le type en Type de table
        ls_function_parameters_static-value_kind = cl_abap_typedescr=&gt;kind_table.

      ELSE.
        ls_function_parameters_static-value_kind = lo_type_descr-&gt;kind.

      ENDIF.

      ls_function_parameters_static-value_type = lo_type_descr-&gt;absolute_name.

      IF ls_function_parameters_static-parameter_kind NE zif_task_constant=&gt;mc_parameter_kind_importing.
        &quot; Suivant son type (Table / Structure / Référence / Autres ...)
        CASE lo_type_descr-&gt;kind.

          WHEN cl_abap_typedescr=&gt;kind_elem.
            &quot; Elementaire
            &quot;&quot;  --&gt; Initialisation de la données
            ls_function_parameters_static-value_data = &lt;lfs_parameter_data&gt;.

          WHEN OTHERS.
            &quot; Cas structure complexe
            TRY.
                &quot;&quot;  --&gt; Initialisation des données sous format XML
                CALL TRANSFORMATION id
                             SOURCE data = &lt;lfs_parameter_data&gt;
                         RESULT XML ls_function_parameters_static-value_data_xml.

              CATCH cx_root INTO lo_cx_exception.
                &quot; Erreur conversion en XML
                &quot;&quot;  --&gt; Lève une exception
                RAISE EXCEPTION TYPE zcx_task
                  EXPORTING
                    previous = lo_cx_exception.

            ENDTRY.

        ENDCASE.

      ENDIF.

      &quot; Ajout du paramètre
      INSERT ls_function_parameters_static INTO TABLE rt_function_parameters_static.

    ENDIF.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK" CMPNAME="CONVERT_STATIC_PARAMETERS" VERSION="1" LANGU="F" DESCRIPT="Conversion données paramètres statique en dynamique" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK" CMPNAME="CONVERT_STATIC_PARAMETERS" SCONAME="IT_FUNCTION_PARAMETERS_STATIC" VERSION="1" LANGU="F" DESCRIPT="Type de table paramètre d&apos;appel Statique" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZTEC_T_FUNCTION_PARAMETERS"/>
   <parameter CLSNAME="ZCL_TASK" CMPNAME="CONVERT_STATIC_PARAMETERS" SCONAME="RT_FUNCTION_PARAMETERS_DYNAMIC" VERSION="1" LANGU="F" DESCRIPT="Table des paramètres dynamique" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIF_TASK_CONSTANT=&gt;TY_T_FUNCTION_PARAMETERS"/>
   <source>METHOD convert_static_parameters.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : CONVERT_STATIC_PARAMETERS                         *
*&amp; Classe          : ZCL_TASK                                          *
*&amp; Description     : Convertis les données des paramètres &quot;statiques&quot;  *
*                    en données &quot;dynamiques&quot;                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_function_parameters_dynamic TYPE zif_task_constant=&gt;ty_function_parameters.

***------------------------------------------------------------------***
**                          FIELD-SYMBOLS                             **
***------------------------------------------------------------------***
  FIELD-SYMBOLS :
    &lt;lfs_value&gt; TYPE any.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  FREE : rt_function_parameters_dynamic.

  IF it_function_parameters_static[] IS INITIAL.
    &quot; Rien à  traiter
    &quot;&quot;  --&gt; Arrêt du traitement
    RETURN.

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Conversion des données statiques en dynamique
  &quot; -----------------------------------------------------------

  LOOP AT it_function_parameters_static ASSIGNING FIELD-SYMBOL(&lt;lfs_s_function_parameters&gt;).

    CLEAR : ls_function_parameters_dynamic.

    &quot; Initialisation du Nom du paramètre
    ls_function_parameters_dynamic-parameter_name = &lt;lfs_s_function_parameters&gt;-parameter_name.

    &quot; Initialisation des données typées
    IF &lt;lfs_s_function_parameters&gt;-parameter_kind NE zif_task_constant=&gt;mc_parameter_kind_tables.
      &quot; Paramètre &lt;&gt; Table
      CREATE DATA ls_function_parameters_dynamic-parameter_data TYPE (&lt;lfs_s_function_parameters&gt;-value_type).

    ELSE.
      &quot; Paramètre type table
      CREATE DATA ls_function_parameters_dynamic-parameter_data TYPE STANDARD TABLE OF (&lt;lfs_s_function_parameters&gt;-value_type).

    ENDIF.

    &quot; Initialisation pointeur sur les données
    ASSIGN ls_function_parameters_dynamic-parameter_data-&gt;* TO &lt;lfs_value&gt;.

    &quot; Suivant le type (ABAP) de données
    IF NOT &lt;lfs_s_function_parameters&gt;-value_data_xml IS INITIAL.
      &quot; Données &quot;complexe&quot; stockées sous forme XML
      CALL TRANSFORMATION id
               SOURCE XML &lt;lfs_s_function_parameters&gt;-value_data_xml
                   RESULT data = &lt;lfs_value&gt;.

    ELSEIF NOT &lt;lfs_s_function_parameters&gt;-value_data IS INITIAL.
      &quot; Type Elémentaire
      &quot;&quot;  --&gt; Initialisation des données
      &lt;lfs_value&gt; = &lt;lfs_s_function_parameters&gt;-value_data.

    ELSE.
      &quot; Autre cas
      &quot;&quot;  --&gt; ToDo : Ajouter ici les autres cas

    ENDIF.

    &quot; Ajout de l&apos;entrée
    INSERT ls_function_parameters_dynamic INTO TABLE rt_function_parameters_dynamic.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK" CMPNAME="FUNCTION_GET_CALL_PARAMETERS" VERSION="1" LANGU="F" DESCRIPT="Récupération paramétre d&apos;appel du MF" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK" CMPNAME="FUNCTION_GET_CALL_PARAMETERS" SCONAME="IV_FUNCTION_NAME" VERSION="1" LANGU="F" DESCRIPT="Nom de fonction" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FUNCNAME"/>
   <exception CLSNAME="ZCL_TASK" CMPNAME="FUNCTION_GET_CALL_PARAMETERS" SCONAME="ZCX_TASK" VERSION="1" LANGU="F" DESCRIPT="Classe Exception Tâche" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD function_get_call_parameters.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : FUNCTION_GET_CALL_PARAMETERS                      *
*&amp; Classe          : ZCL_TASK                                          *
*&amp; Description     : Récupération des paramètres d&apos;appel du MF         *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_textid    TYPE scx_t100key,
    ls_fupararef TYPE zcl_task=&gt;ty_fupararef.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Contrà´le sur le Nom du MF
  &quot; -----------------------------------------------------------

  SELECT SINGLE funcname FROM tfdir
                         INTO ls_fupararef-funcname
                        WHERE funcname EQ iv_function_name.
  IF sy-subrc NE 0.
    &quot; Le MF n&apos;existe pas
    &quot;&quot;  --&gt; Lève une exception
    ls_textid-msgid = zif_task_constant=&gt;mc_message_class_id.
    ls_textid-msgno = 002.
    ls_textid-attr1 = me-&gt;ms_task_data-task_id.
    ls_textid-attr2 = iv_function_name.
    RAISE EXCEPTION TYPE zcx_task
      EXPORTING
        textid = ls_textid.

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Récupération de la liste des paramètres du MF
  &quot; -----------------------------------------------------------

  &quot; Liste paramètres déjà  récupérée ?
  READ TABLE zcl_task=&gt;mt_fupararef WITH KEY funcname = iv_function_name
                                TRANSPORTING NO FIELDS BINARY SEARCH.
  IF sy-subrc NE 0.
    &quot;&quot;  --&gt; Récupération données des paramètres du MF
    SELECT funcname  parameter
           paramtype structure FROM fupararef
                         INTO TABLE zcl_task=&gt;mt_fupararef
                              WHERE funcname EQ iv_function_name.
    IF sy-subrc NE 0.
      &quot; Aucun paramètre existant pour ce MF
      &quot;&quot;  --&gt; Création d&apos;une nouvelle entrée afin d&apos;éviter de rechercher à  nouveau
      ls_fupararef-funcname = iv_function_name.
      INSERT ls_fupararef INTO TABLE zcl_task=&gt;mt_fupararef.

    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK" CMPNAME="TASK_FREE" VERSION="1" LANGU="F" DESCRIPT="Réintialisation de la Tâche" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD task_free.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : TASK_FREE                                         *
*&amp; Classe          : ZCL_TASK                                          *
*&amp; Description     : Réinitialisation de la Tâche                      *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; Réinitialisation des données relatives à  la Tâche
  FREE : me-&gt;ms_task_data-task_running,
         me-&gt;ms_task_data-task_process-task_container.
*         me-&gt;ms_task_data-task_process-t_attached_data,
*         me-&gt;ms_task_data-task_process-function_parameters_output.

  IF me-&gt;ms_task_data-task_dedicated NE abap_true.
    &quot; Dans le cas d&apos;une Tâche non dédiée
    &quot;&quot;  --&gt; Réinitialisation Nom du MF
    FREE : me-&gt;ms_task_data-task_process-function_name.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK" CMPNAME="TASK_START" VERSION="1" LANGU="F" DESCRIPT="Lancement du traitement de la Tâche" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK" CMPNAME="TASK_START" SCONAME="IV_FUNCTION_NAME" VERSION="1" LANGU="F" DESCRIPT="Nom de fonction" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FUNCNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK" CMPNAME="TASK_START" SCONAME="IO_TASK_CONTAINER" VERSION="1" LANGU="F" DESCRIPT="Container paramètres d&apos;appel" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_TASK_CONTAINER" PAROPTIONL="X"/>
   <exception CLSNAME="ZCL_TASK" CMPNAME="TASK_START" SCONAME="ZCX_TASK" VERSION="1" LANGU="F" DESCRIPT="Classe Exception Tâche" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD task_start.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : TASK_START                                        *
*&amp; Classe          : ZCL_TASK                                          *
*&amp; Description     : Permet de démarrer le processus de la Tâche       *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                             TABLES                                 **
***------------------------------------------------------------------***
  DATA :
    lt_result              TYPE ztec_t_function_parameters,
    lt_function_parameters TYPE ztec_t_function_parameters.

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_textid TYPE scx_t100key.

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_cx_exception TYPE REF TO cx_root.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Initialisation Indicateur Tâche en cours de préparation
  &quot; -----------------------------------------------------------

  &quot; Initialisation Indicateur Tâche en cours de préparation
  me-&gt;ms_task_data-task_running = abap_undefined.

  &quot; -----------------------------------------------------------
  &quot; Traitement pour Tâche non dédié à  un MF
  &quot; -----------------------------------------------------------

  IF me-&gt;ms_task_data-task_dedicated NE abap_true.
    &quot; La Tâche n&apos;est pas dédié à  un MF unique
    IF iv_function_name IS INITIAL.
      &quot;Le nom du MF devient alors obligatoire et ce dernier n&apos;a pas été transmis
      &quot;&quot;  --&gt; Arrêt du traitement // Lève une exception
      me-&gt;ms_task_data-task_running = abap_false.
      ls_textid-msgid = zif_task_constant=&gt;mc_message_class_id.
      ls_textid-msgno = 003.
      ls_textid-attr1 = me-&gt;ms_task_data-task_id.
      RAISE EXCEPTION TYPE zcx_task
        EXPORTING
          textid = ls_textid.

    ELSE.
      &quot; Nom MF transmis
      TRY.
          &quot;&quot;  --&gt; Récupération des paramètres du MF
          me-&gt;function_get_call_parameters( iv_function_name ).

        CATCH zcx_task INTO lo_cx_exception.
          &quot; Erreur lors de la récupération des paramètres d&apos;appel
          me-&gt;ms_task_data-task_running = abap_false.
          RAISE EXCEPTION TYPE zcx_task
            EXPORTING
              previous = lo_cx_exception.

      ENDTRY.

      &quot;&quot;  --&gt; Initialisation du nom du MF pour poursuite du traitement
      me-&gt;ms_task_data-task_process-function_name = iv_function_name.

    ENDIF.

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Initialisation paramètres d&apos;appel
  &quot; -----------------------------------------------------------

  FREE : me-&gt;ms_task_data-task_process-task_container.
  IF io_task_container IS BOUND.
    &quot; Utilisation des paramètres d&apos;appel transmis
    me-&gt;ms_task_data-task_process-task_container = io_task_container-&gt;copy_get( ).

  ELSE.
    &quot; Création nouvelle instance Container
    CREATE OBJECT me-&gt;ms_task_data-task_process-task_container.

  ENDIF.

  IF NOT me-&gt;ms_task_data-task_process-task_container-&gt;mt_function_parameters[] IS INITIAL.
    &quot; -----------------------------------------------------------
    &quot; Initialisation table de paramètre statique pour appel Asynchrone
    &quot; -----------------------------------------------------------

    TRY.
        &quot; Conversion des paramètres dynamique en statique (pour appel MF de lancement)
        lt_function_parameters = me-&gt;convert_dynamic_parameters( me-&gt;ms_task_data-task_process-task_container-&gt;mt_function_parameters ).

      CATCH zcx_task INTO lo_cx_exception.
        &quot; Une erreur est survenue
        &quot;&quot;  --&gt; Lève une Exception
        me-&gt;ms_task_data-task_running = abap_false.
        RAISE EXCEPTION TYPE zcx_task
          EXPORTING
            textid = ls_textid.

    ENDTRY.

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Initialisation Indicateur Tâche en cours de traitement
  &quot; -----------------------------------------------------------

  &quot; Initialisation Indicateur Tâche occupée
  me-&gt;ms_task_data-task_running = abap_true.

  &quot; -----------------------------------------------------------
  &quot; Appel du Traitement en //
  &quot; -----------------------------------------------------------

  IF me-&gt;ms_task_data-use_default_group EQ abap_true.
    &quot; Appel fonction générique (avec paramètre statique) qui appelle le MF souhaité
    CALL FUNCTION &apos;Z_TASK_CALL_PROCESS&apos;
      STARTING NEW TASK me-&gt;ms_task_data-task_id DESTINATION IN GROUP DEFAULT
      CALLING at_end_of_task ON END OF TASK
      EXPORTING
        iv_function_name       = me-&gt;ms_task_data-task_process-function_name
        it_function_parameters = lt_function_parameters
      EXCEPTIONS
        system_failure         = 1
        communication_failure  = 2
        resource_failure       = 3
        OTHERS                 = 4.

  ELSE.
    &quot; Appel fonction générique (avec paramètre statique) qui appelle le MF souhaité
    CALL FUNCTION &apos;Z_TASK_CALL_PROCESS&apos;
      STARTING NEW TASK me-&gt;ms_task_data-task_id DESTINATION IN GROUP me-&gt;ms_task_data-task_grfc
      CALLING at_end_of_task ON END OF TASK
      EXPORTING
        iv_function_name       = me-&gt;ms_task_data-task_process-function_name
        it_function_parameters = lt_function_parameters
      EXCEPTIONS
        system_failure         = 1
        communication_failure  = 2
        resource_failure       = 3
        OTHERS                 = 4.

  ENDIF.
  IF sy-subrc EQ 0.
    &quot; Aucune erreur

  ELSEIF sy-subrc EQ 1
      OR sy-subrc EQ 2
      OR sy-subrc EQ 3.
    &quot; Erreur lors de l&apos;appel RFC asynchrone
    &quot;&quot;  --&gt; Appel du Traitement en Synchrone
    CALL FUNCTION &apos;Z_TASK_CALL_PROCESS&apos;
      EXPORTING
        iv_function_name       = me-&gt;ms_task_data-task_process-function_name
        it_function_parameters = lt_function_parameters
      IMPORTING
        et_result              = lt_result.

    &quot;&quot;  --&gt; Appel traitement de fin d&apos;une Tâche
    me-&gt;__at_end_of_task( lt_result ).

  ELSE.
    &quot; Erreur &quot;fonctionnelle&quot; // Si implémentée au niveau du MF &quot;Z_TASK_CALL_PROCESS&quot;
    &quot;&quot;  --&gt; Initialisation code en erreur
    ls_textid-msgid = sy-msgid.
    ls_textid-msgno = sy-msgno.
    ls_textid-attr1 = sy-msgv1.
    ls_textid-attr2 = sy-msgv2.
    ls_textid-attr3 = sy-msgv3.
    ls_textid-attr4 = sy-msgv4.
    RAISE EXCEPTION TYPE zcx_task
      EXPORTING
        textid = ls_textid.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK" CMPNAME="TASK_STOP" VERSION="1" LANGU="F" DESCRIPT="Fin du taitement de la Tâche" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD task_stop.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : TASK_STOP                                         *
*&amp; Classe          : ZCL_TASK                                          *
*&amp; Description     : Termine la Tâche                                  *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Note d&apos;utilisation :
  &quot;  On ne libère pas la Tâche (réinitialisation de l&apos;indicateur
  &quot;  en cours de traitement) dans cette classe !
  &quot;  Seule la classe ZCL_TASK_MANAGER se réserve le droit
  &quot;  de modifier cet indicateur afin de maitriser
  &quot;  parfaitement les débuts et fin de Tâche.
  &quot; -----------------------------------------------------------

  &quot; -----------------------------------------------------------
  &quot; Traitement lors du fin de la Tâche
  &quot; -----------------------------------------------------------

  &quot;&quot;  --&gt; Lève évènement fin de Tâche (à destination de ZCL_TASK_MANAGER)
  RAISE EVENT task_end
    EXPORTING
      io_task = me.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK" CMPNAME="__AT_END_OF_TASK" VERSION="1" LANGU="F" DESCRIPT="Traitement fin d&apos;une Tâche" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK" CMPNAME="__AT_END_OF_TASK" SCONAME="IT_RESULT" VERSION="1" LANGU="F" DESCRIPT="Type de table paramètre d&apos;appel Statique" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZTEC_T_FUNCTION_PARAMETERS" PAROPTIONL="X"/>
   <source>METHOD __at_end_of_task.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : __AT_END_OF_TASK                                  *
*&amp; Classe          : ZCL_TASK                                          *
*&amp; Description     : Traitement fin d&apos;une Tâche                        *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  IF NOT it_result[] IS INITIAL.
    &quot; -----------------------------------------------------------
    &quot; Conversion des paramètres statiques en dynamiques
    &quot; -----------------------------------------------------------

    &quot; Initialisation des paramètres de retour du MF
    me-&gt;ms_task_data-task_process-task_container-&gt;mt_function_parameters_output = me-&gt;convert_static_parameters( it_result ).

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Fin de la Tâche
  &quot; -----------------------------------------------------------

  me-&gt;task_stop( ).

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_TASK_CONTAINER" VERSION="1" LANGU="F" DESCRIPT="Container paramètres d&apos;appel" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <friends CLSNAME="ZCL_TASK_CONTAINER" REFCLSNAME="ZCL_TASK" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <friends CLSNAME="ZCL_TASK_CONTAINER" REFCLSNAME="ZCL_TASK_MANAGER" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_TASK_CONTAINER" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <typeIntfDef CLSNAME="ZCL_TASK_CONTAINER" TYPEGROUP="ZIF_TASK_CONSTANT" VERSION="1" TPUTYPE="2" IMPLICIT="X"/>
  <attribute CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="MT_ATTACHED_DATA" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIF_TASK_CONSTANT=&gt;TY_T_TASK_ATTACHED_DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="MT_FUNCTION_PARAMETERS" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIF_TASK_CONSTANT=&gt;TY_T_FUNCTION_PARAMETERS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="MT_FUNCTION_PARAMETERS_OUTPUT" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZIF_TASK_CONSTANT=&gt;TY_T_FUNCTION_PARAMETERS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="ATTACHED_DATA_ADD" VERSION="1" LANGU="F" DESCRIPT="Ajout données contextuelle" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="ATTACHED_DATA_ADD" SCONAME="IV_NAME" VERSION="1" LANGU="F" DESCRIPT="Donnée contextuelle - Nom" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CLIKE"/>
   <parameter CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="ATTACHED_DATA_ADD" SCONAME="IX_DATA" VERSION="1" LANGU="F" DESCRIPT="Donnée contextuelle - Valeur" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <source>METHOD attached_data_add.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : ATTACHED_DATA_ADD                                 *
*&amp; Classe          : ZCL_TASK_CONTAINER                                *
*&amp; Description     : Ajout de données contextuelles                    *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_attached_data TYPE zif_task_constant=&gt;ty_task_attached_data.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Ajout données contextuelle
  &quot; -----------------------------------------------------------

  ls_attached_data-name = iv_name.
  IF ix_data IS SUPPLIED.
    ls_attached_data-data = REF #( ix_data ).

  ENDIF.
  INSERT ls_attached_data INTO TABLE me-&gt;mt_attached_data.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="F" DESCRIPT="CONSTRUCTOR" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="CONSTRUCTOR" SCONAME="IT_FUNCTION_PARAMETERS" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIF_TASK_CONSTANT=&gt;TY_T_FUNCTION_PARAMETERS" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="CONSTRUCTOR" SCONAME="IT_ATTACHED_DATA" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIF_TASK_CONSTANT=&gt;TY_T_TASK_ATTACHED_DATA" PAROPTIONL="X"/>
   <source>METHOD constructor.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : CONSTRUCTOR                                       *
*&amp; Classe          : ZCL_TASK_CONTAINER                                *
*&amp; Description     : Création du Container                             *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Initialisation des attributs
  &quot; -----------------------------------------------------------

  IF it_function_parameters IS SUPPLIED.
    &quot; Initialisation des paramètres d&apos;appel
    me-&gt;mt_function_parameters[] = it_function_parameters[].

  ENDIF.

  IF it_attached_data IS SUPPLIED.
    &quot; Initialisation des données contextuelles
    me-&gt;mt_attached_data[] = it_attached_data[].

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="COPY_GET" VERSION="1" LANGU="F" DESCRIPT="Retourne une copie de l&apos;instance" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="COPY_GET" SCONAME="RO_TASK_CONTAINER" VERSION="1" LANGU="F" DESCRIPT="Container paramètres d&apos;appel" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TASK_CONTAINER"/>
   <source>METHOD copy_get.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : COPY_GET                                          *
*&amp; Classe          : ZCL_TASK_CONTAINER                                *
*&amp; Description     : Création Copie du Container                       *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Création nouvelle instance avec les mêmes paramètres
  &quot; -----------------------------------------------------------

  CREATE OBJECT ro_task_container
    EXPORTING
      it_attached_data       = me-&gt;mt_attached_data
      it_function_parameters = me-&gt;mt_function_parameters.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="FUNCTION_PARAMETER_ADD" VERSION="1" LANGU="F" DESCRIPT="Ajout paramètres d&apos;appel MF" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="FUNCTION_PARAMETER_ADD" SCONAME="IV_PARAMETER_NAME" VERSION="1" LANGU="F" DESCRIPT="Paramètre d&apos;appel - Nom" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CLIKE"/>
   <parameter CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="FUNCTION_PARAMETER_ADD" SCONAME="IX_PARAMETER_DATA" VERSION="1" LANGU="F" DESCRIPT="Paramètre d&apos;appel - Valeur" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="FUNCTION_PARAMETER_ADD" SCONAME="IV_TYPE_FOR_NONE_DDIC_PARAM" VERSION="1" LANGU="F" DESCRIPT="Type paramètre d&apos;appel (type local / générique uniquement)" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CLIKE" PAROPTIONL="X"/>
   <source>METHOD function_parameter_add.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : FUNCTION_PARAMETER_ADD                            *
*&amp; Classe          : ZCL_TASK_CONTAINER                                *
*&amp; Description     : Ajout de paramètres d&apos;appel                       *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *


***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_function_parameters TYPE zif_task_constant=&gt;ty_function_parameters.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Ajout paramètre d&apos;appel
  &quot; -----------------------------------------------------------

  ls_function_parameters-parameter_name   = iv_parameter_name.
  IF ix_parameter_data IS SUPPLIED.
    ls_function_parameters-parameter_data = REF #( ix_parameter_data ).

  ENDIF.
  ls_function_parameters-type_for_none_ddic_parameter = iv_type_for_none_ddic_param.
  INSERT ls_function_parameters INTO TABLE me-&gt;mt_function_parameters.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="RESET" VERSION="1" LANGU="F" DESCRIPT="Réinitialisation" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="RESET" SCONAME="IV_ALL" VERSION="1" LANGU="F" DESCRIPT="Réinitialisation de tous les attributs" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="RESET" SCONAME="IV_FUNCTION_PARAMETER" VERSION="1" LANGU="F" DESCRIPT="Réinitialisation paramètre d&apos;appel" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_CONTAINER" CMPNAME="RESET" SCONAME="IV_ATTACHED_DATA" VERSION="1" LANGU="F" DESCRIPT="Réintiialisation données contextuelles" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <source>METHOD reset.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : RESET                                             *
*&amp; Classe          : ZCL_TASK_CONTAINER                                *
*&amp; Description     : Réinitialisation du Container                     *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *


***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Réinitialisation des attributs
  &quot; -----------------------------------------------------------

  IF iv_all           EQ abap_true
  OR iv_attached_data EQ abap_true.
    &quot; Réinitialisation données contextuelles
    FREE : me-&gt;mt_attached_data.

  ENDIF.

  IF iv_all                EQ abap_true
  OR iv_function_parameter EQ abap_true.
    &quot; Réinitialisation données d&apos;appel
    FREE : me-&gt;mt_function_parameters.

  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_TASK_HANDLER" VERSION="1" LANGU="F" DESCRIPT="Handler Fin d&apos;une Tâche" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <friends CLSNAME="ZCL_TASK_HANDLER" REFCLSNAME="ZCL_TASK_MANAGER" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_TASK_HANDLER" CMPNAME="MS_PROCESS_BY_FORM" VERSION="1" LANGU="F" DESCRIPT="Tâche - Traitement par Routine" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZTEC_S_TASK_PROCESS_BY_FORM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TASK_HANDLER" CMPNAME="MS_PROCESS_BY_METHOD" VERSION="1" LANGU="F" DESCRIPT="Tâche - Traitement par Méthode" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZTEC_S_TASK_PROCESS_BY_METHOD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_TASK_HANDLER" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="F" DESCRIPT="CONSTRUCTOR" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_HANDLER" CMPNAME="CONSTRUCTOR" SCONAME="IO_TASK_MANAGER" VERSION="1" LANGU="F" DESCRIPT="Gestion Processus //" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_TASK_MANAGER"/>
   <parameter CLSNAME="ZCL_TASK_HANDLER" CMPNAME="CONSTRUCTOR" SCONAME="IS_PROCESS_BY_FORM" VERSION="1" LANGU="F" DESCRIPT="Tâche - Traitement par Routine" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZTEC_S_TASK_PROCESS_BY_FORM" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_HANDLER" CMPNAME="CONSTRUCTOR" SCONAME="IS_PROCESS_BY_METHOD" VERSION="1" LANGU="F" DESCRIPT="Tâche - Traitement par Méthode" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZTEC_S_TASK_PROCESS_BY_METHOD" PAROPTIONL="X"/>
   <source>METHOD constructor.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : CONSTRUCTOR                                       *
*&amp; Classe          : ZCL_TASK_HANDLER                                  *
*&amp; Description     : Constructeur classe Handler TASK_MANAGER          *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Souscription à l&apos;évènement de Fin d&apos;une Tâche sur le Manager
  &quot; -----------------------------------------------------------

  &quot; Souscription à  l&apos;événement
  SET HANDLER me-&gt;handler_manager_end_of_task FOR io_task_manager.

  &quot; -----------------------------------------------------------
  &quot; Initialisation des attributs
  &quot; -----------------------------------------------------------

  IF NOT is_process_by_form IS INITIAL.
    &quot; Traitement par Routine
    me-&gt;ms_process_by_form   = is_process_by_form.

  ELSEIF NOT is_process_by_method IS INITIAL.
    &quot; Traitement par Méthode
    me-&gt;ms_process_by_method = is_process_by_method.

  ELSE.  ##NEEDED
    &quot; Aucun attribut
    &quot;&quot;  --&gt; Pas de traitement ?

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_HANDLER" CMPNAME="HANDLER_FACTORY" VERSION="1" LANGU="F" DESCRIPT="Création Handler" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_HANDLER" CMPNAME="HANDLER_FACTORY" SCONAME="IO_TASK_MANAGER" VERSION="1" LANGU="F" DESCRIPT="Gestion Processus //" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_TASK_MANAGER"/>
   <parameter CLSNAME="ZCL_TASK_HANDLER" CMPNAME="HANDLER_FACTORY" SCONAME="IS_PROCESS_BY_FORM" VERSION="1" LANGU="F" DESCRIPT="Tâche - Traitement par Routine" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZTEC_S_TASK_PROCESS_BY_FORM" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_HANDLER" CMPNAME="HANDLER_FACTORY" SCONAME="IS_PROCESS_BY_METHOD" VERSION="1" LANGU="F" DESCRIPT="Tâche - Traitement par Méthode" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZTEC_S_TASK_PROCESS_BY_METHOD" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_HANDLER" CMPNAME="HANDLER_FACTORY" SCONAME="RO_HANDLER" VERSION="1" LANGU="F" DESCRIPT="Handler Fin d&apos;une Tâche" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TASK_HANDLER"/>
   <source>METHOD handler_factory.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Création de l&apos;instance Handler
  &quot; -----------------------------------------------------------

  &quot; Création de l&apos;instance
  CREATE OBJECT ro_handler
    EXPORTING
      io_task_manager      = io_task_manager
      is_process_by_form   = is_process_by_form
      is_process_by_method = is_process_by_method.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_HANDLER" CMPNAME="HANDLER_MANAGER_END_OF_TASK" VERSION="1" LANGU="F" DESCRIPT="Handler Enement fin d&apos;une Tâche (TASK_MANAGER)" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="ZCL_TASK_MANAGER" REFCMPNAME="MANAGER_END_OF_TASK" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_HANDLER" CMPNAME="HANDLER_MANAGER_END_OF_TASK" SCONAME="IV_FUNCTION_NAME" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_TASK_HANDLER" CMPNAME="HANDLER_MANAGER_END_OF_TASK" SCONAME="IT_RESULT" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_TASK_HANDLER" CMPNAME="HANDLER_MANAGER_END_OF_TASK" SCONAME="IT_ATTACHED_DATA" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="1" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_TASK_HANDLER" CMPNAME="HANDLER_MANAGER_END_OF_TASK" SCONAME="IV_ERROR" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="1" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <source>METHOD HANDLER_MANAGER_END_OF_TASK.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : HANDLER_END_OF_TASK                               *
*&amp; Classe          : ZCL_TASK_HANDLER                                  *
*&amp; Description     : Handler sur event ZCL_TASK_MANAGER=&gt;END_OF_TASK   *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_cx_exception TYPE REF TO cx_root.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  TRY.
      IF NOT me-&gt;ms_process_by_form IS INITIAL.
        &quot; -----------------------------------------------------------
        &quot; Traitement par Routine
        &quot; -----------------------------------------------------------

        &quot; Appel de la routine
        PERFORM (me-&gt;ms_process_by_form-form)
             IN PROGRAM (me-&gt;ms_process_by_form-repid)
                  USING iv_function_name
                        it_result
                        it_attached_data
                        iv_error
                     IF FOUND.

      ELSEIF NOT me-&gt;ms_process_by_method IS INITIAL.
        &quot; -----------------------------------------------------------
        &quot; Traitement par appel de méthode
        &quot; -----------------------------------------------------------

        &quot; Appel de la méthode
        CALL METHOD me-&gt;ms_process_by_method-instance-&gt;(me-&gt;ms_process_by_method-method)
          EXPORTING
            iv_error         = iv_error
            iv_function_name = iv_function_name
            it_result        = it_result
            it_attached_data = it_attached_data.

      ENDIF.

*-- Ensemble des Exceptions relatives aux appels dynamiques
      &quot; Ces cas ne peuvent se produire que dans le cas d&apos;une mauvaise utilisation du développeur
    CATCH cx_sy_program_not_found cx_sy_dyn_call_error INTO lo_cx_exception.
*-- Ensemble des Exceptions relatives aux appels dynamiques
    CATCH cx_root                 INTO lo_cx_exception.   ##CATCH_ALL
      &quot; Tout autre cas d&apos;erreur
      &quot;&quot;  --&gt; Force la provocation d&apos;un DUMP &quot;spécifique&quot;
      WHILE lo_cx_exception-&gt;previous IS BOUND. lo_cx_exception = lo_cx_exception-&gt;previous. ENDWHILE.
      lo_cx_exception-&gt;get_text( ).
      MESSAGE ID sy-msgid TYPE &apos;X&apos; NUMBER sy-msgno
                                     WITH sy-msgv1
                                          sy-msgv2
                                          sy-msgv3
                                          sy-msgv4.

  ENDTRY.

  IF lo_cx_exception IS BOUND.
    &quot; Ce code est exécuté que dans le cas où une Exception d&apos;une mauvaise utilisation
    &quot;&quot;  --&gt; Lève l&apos;Exception qui ne sera pas catché (DUMP)
    WHILE lo_cx_exception-&gt;previous IS BOUND. lo_cx_exception = lo_cx_exception-&gt;previous. ENDWHILE.
    RAISE EXCEPTION lo_cx_exception.

  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_TASK_MANAGER" VERSION="1" LANGU="F" DESCRIPT="Gestion Processus //" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" MSG_ID="ZTASK" WITH_UNIT_TESTS="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <types CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TY_TFDIR" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="4 " SRCCOLUMN1="4 " SRCROW2="7 " SRCCOLUMN2="22 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_tfdir,
        funcname  TYPE tfdir-funcname,
        not_found TYPE flag,
      END OF   ty_tfdir
"/>
  <types CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TY_T_TFDIR" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="4 " SRCROW2="10 " SRCCOLUMN2="72 " TYPESRC_LENG="0 " TYPESRC="ty_t_tfdir TYPE SORTED TABLE OF ty_tfdir
                          WITH UNIQUE KEY primary_key COMPONENTS funcname
"/>
  <types CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TY_RZLLITAB" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="12 " SRCCOLUMN1="4 " SRCROW2="15 " SRCCOLUMN2="25 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_rzllitab,
        classname TYPE rzllitab-classname,
        not_found TYPE flag,
      END OF   ty_rzllitab
"/>
  <types CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TY_T_RZLLITAB" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="17 " SRCCOLUMN1="4 " SRCROW2="18 " SRCCOLUMN2="76 " TYPESRC_LENG="0 " TYPESRC="ty_t_rzllitab TYPE SORTED TABLE OF ty_rzllitab
                             WITH UNIQUE KEY primary_key COMPONENTS classname
"/>
  <types CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TY_TASK" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="11 " SRCCOLUMN1="4 " SRCROW2="15 " SRCCOLUMN2="21 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_task,
        task_id      TYPE zcl_task=&gt;ty_task-task_id,
        task_running TYPE zcl_task=&gt;ty_task-task_running,
        process_data TYPE REF TO data,
      END OF   ty_task
"/>
  <types CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TY_T_TASK" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="17 " SRCCOLUMN1="4 " SRCROW2="18 " SRCCOLUMN2="72 " TYPESRC_LENG="0 " TYPESRC="ty_t_task TYPE SORTED TABLE OF ty_task
                           WITH UNIQUE KEY primary_key COMPONENTS task_id
"/>
  <types CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TY_TASK_LIST" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="20 " SRCCOLUMN1="4 " SRCROW2="24 " SRCCOLUMN2="24 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_task_list,
      task_id       TYPE        zcl_task=&gt;ty_task-task_id,
      task_running  TYPE REF TO zcl_task=&gt;ty_task-task_running,
      task_instance TYPE REF TO zcl_task,
    END OF   ty_task_list
"/>
  <types CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TY_T_TASK_LIST" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="26 " SRCCOLUMN1="4 " SRCROW2="27 " SRCCOLUMN2="75 " TYPESRC_LENG="0 " TYPESRC="ty_t_task_list TYPE SORTED TABLE OF ty_task_list
                              WITH UNIQUE KEY primary_key COMPONENTS task_id
"/>
  <friends CLSNAME="ZCL_TASK_MANAGER" REFCLSNAME="ZCL_TASK_HANDLER" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <events CLSNAME="ZCL_TASK_MANAGER" CMPNAME="MANAGER_END_OF_TASK" VERSION="1" LANGU="F" DESCRIPT="Evènement fin d&apos;une Tâche" EXPOSURE="0" STATE="1" EDITORDER="1 " EVTDECLTYP="0" BCEVTCAT="00">
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="MANAGER_END_OF_TASK" SCONAME="IV_FUNCTION_NAME" VERSION="1" LANGU="F" DESCRIPT="Nom de fonction" CMPTYPE="2" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="FUNCNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="MANAGER_END_OF_TASK" SCONAME="IT_RESULT" VERSION="1" LANGU="F" DESCRIPT="Table de retour" CMPTYPE="2" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIF_TASK_CONSTANT=&gt;TY_T_FUNCTION_PARAMETERS" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="MANAGER_END_OF_TASK" SCONAME="IT_ATTACHED_DATA" VERSION="1" LANGU="F" DESCRIPT="Données liées à la Tâche" CMPTYPE="2" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="ZIF_TASK_CONSTANT=&gt;TY_T_TASK_ATTACHED_DATA" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="MANAGER_END_OF_TASK" SCONAME="IV_ERROR" VERSION="1" LANGU="F" DESCRIPT="Une erreur est survenue ?" CMPTYPE="2" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
  </events>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <localTestClasses>*&quot;* use this source file for your ABAP unit test classes</localTestClasses>
  <attribute CLSNAME="ZCL_TASK_MANAGER" CMPNAME="MO_TASK_HANDLER" VERSION="1" LANGU="F" DESCRIPT="Handler Fin d&apos;une Tâche" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_TASK_HANDLER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TASK_MANAGER" CMPNAME="MT_RZLLITAB" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZCL_TASK_MANAGER=&gt;TY_T_RZLLITAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TASK_MANAGER" CMPNAME="MT_TASK_LIST" VERSION="1" LANGU="F" DESCRIPT="Liste des Tâches" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZCL_TASK_MANAGER=&gt;TY_T_TASK_LIST" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TASK_MANAGER" CMPNAME="MT_TFDIR" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ZCL_TASK_MANAGER=&gt;TY_T_TFDIR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_TASK_MANAGER" CMPNAME="CHECK" VERSION="1" LANGU="F" DESCRIPT="Contrôle des paramétres" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="CHECK" SCONAME="IV_GRFC" VERSION="1" LANGU="F" DESCRIPT="Groupe de serveurs RFC pour traitement paralléle" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCGR"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="CHECK" SCONAME="IV_USE_DEFAULT_GROUP" VERSION="1" LANGU="F" DESCRIPT="Utilisation groupe RFC par défaut" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="CHECK" SCONAME="IV_FUNCTION_NAME" VERSION="1" LANGU="F" DESCRIPT="Nom de fonction" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FUNCNAME" PAROPTIONL="X"/>
   <exception CLSNAME="ZCL_TASK_MANAGER" CMPNAME="CHECK" SCONAME="ZCX_TASK_MANAGER" VERSION="1" LANGU="F" DESCRIPT="Classe Exception Manager Tâche" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD check.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : CHECK                                             *
*&amp; Classe          : ZCL_TASK_MANAGER                                  *
*&amp; Description     : Contrôle paramètère //                            *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_tfdir    TYPE ty_tfdir,
    ls_textid   TYPE scx_t100key,
    ls_rzllitab TYPE ty_rzllitab.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  IF iv_use_default_group EQ abap_false.
    &quot; -----------------------------------------------------------
    &quot; Contrôle Groupe de Serveur
    &quot; -----------------------------------------------------------

    &quot; Récupération entrée sur Groupe de Serveur
    READ TABLE zcl_task_manager=&gt;mt_rzllitab WITH TABLE KEY classname = iv_grfc
                                                  ASSIGNING FIELD-SYMBOL(&lt;lfs_s_rzllitab&gt;).
    IF sy-subrc NE 0.
      &quot; Entrée non encore référencé
      &quot;&quot;  --&gt; Recherche le Groupe de Serveur
      SELECT SINGLE classname FROM rzllitab
                              INTO ls_rzllitab-classname
                             WHERE classname EQ iv_grfc.
      IF sy-subrc NE 0.
        &quot; Le Groupe de Serveur n&apos;existe pas
        &quot;&quot;  --&gt; Initialisation structure
        ls_rzllitab-classname = iv_grfc.
        ls_rzllitab-not_found = abap_true.

      ENDIF.

      &quot; Ajout de l&apos;entrée
      INSERT ls_rzllitab INTO TABLE zcl_task_manager=&gt;mt_rzllitab ASSIGNING &lt;lfs_s_rzllitab&gt;.

    ENDIF.

    IF &lt;lfs_s_rzllitab&gt; IS ASSIGNED AND &lt;lfs_s_rzllitab&gt;-not_found EQ abap_true.
      &quot; Le Groupe de Serveur n&apos;existe pas
      &quot;&quot;  --&gt; Lève une Exception
      ls_textid-msgid = zif_task_constant=&gt;mc_message_class_id.
      ls_textid-msgno = 105.
      ls_textid-attr1 = iv_grfc.
      RAISE EXCEPTION TYPE zcx_task_manager
        EXPORTING
          textid = ls_textid.

    ENDIF.

    &quot; Contrôle Initialisation Groupe de Serveur
    CALL FUNCTION &apos;SPBT_INITIALIZE&apos;
      EXPORTING
        group_name                     = iv_grfc
      EXCEPTIONS
        invalid_group_name             = 3
        internal_error                 = 2
        pbt_env_already_initialized    = 1
        currently_no_resources_avail   = 1
        no_pbt_resources_found         = 4
        cant_init_different_pbt_groups = 6
        OTHERS                         = 7.
    IF sy-subrc GT 1.
      &quot; Erreur création Groupe de //
      &quot;&quot;  --&gt; Lève une Exception
      ls_textid-msgid = sy-msgid.
      ls_textid-msgno = sy-msgty.
      ls_textid-msgno = sy-msgno.
      ls_textid-attr1 = sy-msgv1.
      ls_textid-attr2 = sy-msgv2.
      ls_textid-attr3 = sy-msgv3.
      ls_textid-attr4 = sy-msgv4.
      RAISE EXCEPTION TYPE zcx_task_manager
        EXPORTING
          textid = ls_textid.

    ENDIF.

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Contrôle Module Fonction
  &quot; -----------------------------------------------------------

  IF NOT iv_function_name IS INITIAL.
    &quot; Récupération entrée sur MF
    READ TABLE zcl_task_manager=&gt;mt_tfdir WITH TABLE KEY funcname = iv_function_name
                                               ASSIGNING FIELD-SYMBOL(&lt;lfs_s_tfdir&gt;).
    IF sy-subrc NE 0.
      &quot;&quot;  --&gt; Recherche l&apos;existence du MF
      SELECT SINGLE funcname FROM tfdir
                             INTO ls_tfdir-funcname
                            WHERE funcname EQ iv_function_name.
      IF sy-subrc NE 0.
        &quot; Le MF n&apos;existe pas
        &quot;&quot;  --&gt; Initialisation structure
        ls_tfdir-funcname  = iv_function_name.
        ls_tfdir-not_found = abap_true.

      ENDIF.

      &quot; Ajout de l&apos;entrée
      INSERT ls_tfdir INTO TABLE zcl_task_manager=&gt;mt_tfdir ASSIGNING &lt;lfs_s_tfdir&gt;.

    ENDIF.

    IF &lt;lfs_s_tfdir&gt; IS ASSIGNED AND &lt;lfs_s_tfdir&gt;-not_found EQ abap_true.
      &quot; Le MF n&apos;existe pas
      &quot;&quot;  --&gt; Lève une exception
      ls_textid-msgid = zif_task_constant=&gt;mc_message_class_id.
      ls_textid-msgno = 104.
      ls_textid-attr1 = iv_function_name.
      RAISE EXCEPTION TYPE zcx_task_manager
        EXPORTING
          textid = ls_textid.

    ENDIF.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_MANAGER" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="F" DESCRIPT="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="CONSTRUCTOR" SCONAME="IV_GRFC" VERSION="1" LANGU="F" DESCRIPT="Groupe de serveurs RFC pour traitement paralléle" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCGR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="CONSTRUCTOR" SCONAME="IV_TASK_MAX" VERSION="1" LANGU="F" DESCRIPT="Nombre de Tâche maximum" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="NUMERIC"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="CONSTRUCTOR" SCONAME="IV_FUNCTION_NAME" VERSION="1" LANGU="F" DESCRIPT="Nom de fonction" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FUNCNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="CONSTRUCTOR" SCONAME="IS_PROCESS_BY_FORM" VERSION="1" LANGU="F" DESCRIPT="Tâche - Traitement par Routine" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZTEC_S_TASK_PROCESS_BY_FORM" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="CONSTRUCTOR" SCONAME="IS_PROCESS_BY_METHOD" VERSION="1" LANGU="F" DESCRIPT="Tâche - Traitement par Méthode" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZTEC_S_TASK_PROCESS_BY_METHOD" PAROPTIONL="X"/>
   <exception CLSNAME="ZCL_TASK_MANAGER" CMPNAME="CONSTRUCTOR" SCONAME="ZCX_TASK_MANAGER" VERSION="1" LANGU="F" DESCRIPT="Classe Exception Manager Tâche" MTDTYPE="2" EDITORDER="1 "/>
   <source>METHOD constructor.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : CONSTRUCTOR                                       *
*&amp; Classe          : ZCL_TASK_MANAGER                                  *
*&amp; Description     : Constructeur instance                             *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_textid    TYPE scx_t100key,
    ls_task_list TYPE zcl_task_manager=&gt;ty_task_list.

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_cx_task      TYPE REF TO zcx_task,
    lo_cx_exception TYPE REF TO cx_root.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Note d&apos;utilisation :
  &quot;   Si le nom de fonction est renseigné, il est transmis
  &quot;     aux Tâches. Par conséquent, ces Tâches ne pourront
  &quot;     exécuter que ce MF.
  &quot;   Dans le cas contraire, chaque Tâche peut lancer
  &quot;     un MF différent mais le code MF devient alors
  &quot;     obligatoire lors de l&apos;appel de &quot;TASK_START_NEW&quot;
  &quot; -----------------------------------------------------------

  IF iv_task_max IS INITIAL.
    &quot; Aucune Tâche Ã  créer
    &quot;&quot;  --&gt; Lève une Exception
    ls_textid-msgid = zif_task_constant=&gt;mc_message_class_id.
    ls_textid-msgno = 102.
    RAISE EXCEPTION TYPE zcx_task_manager
      EXPORTING
        textid = ls_textid.

  ENDIF.

  TRY.
      &quot; -----------------------------------------------------------
      &quot; Contrôle des données
      &quot; -----------------------------------------------------------
      me-&gt;check(
        iv_grfc              = iv_grfc
        iv_use_default_group = boolc( iv_grfc IS INITIAL )  &quot;Vrai si pas de groupe de serveur valorisé
        iv_function_name     = iv_function_name
      ).

    CATCH zcx_task_manager INTO lo_cx_exception.
      &quot; Les données ne sont pas cohérentes
      &quot;&quot;  --&gt; Lève une Exception
      RAISE EXCEPTION TYPE zcx_task_manager
        EXPORTING
          previous = lo_cx_exception.

  ENDTRY.

  &quot; -----------------------------------------------------------
  &quot; Création des Tâches
  &quot; -----------------------------------------------------------

  &quot; Création d&apos;autant de Tâche que nécessaire
  DO iv_task_max TIMES.

    FREE : ls_task_list.

    TRY.
        &quot;&quot;  --&gt; Création d&apos;une instance de Tâche
        CREATE OBJECT ls_task_list-task_instance
          EXPORTING
            iv_grfc          = iv_grfc
            iv_function_name = iv_function_name.

      CATCH zcx_task INTO lo_cx_task.
        &quot; Erreur création Tâche
        &quot;&quot;  --&gt; Passe Ã  l&apos;itération suivante
        CONTINUE.

    ENDTRY.

    &quot;&quot;  --&gt; Initialisation ID de la Tâche
    ls_task_list-task_id = ls_task_list-task_instance-&gt;ms_task_data-task_id.

    &quot;&quot;  --&gt; Initialisation &quot;pointeur&quot; sur l&apos;indicateur de traitement de la Tâche
    ls_task_list-task_running = REF #( ls_task_list-task_instance-&gt;ms_task_data-task_running ).

    &quot;&quot;  --&gt; Ajout de la Tâche
    INSERT ls_task_list INTO TABLE me-&gt;mt_task_list.

    &quot;&quot;  --&gt; Souscription aux évènements de :
    SET HANDLER me-&gt;handler_task_end          FOR ls_task_list-task_instance.  &quot;Fin de Tâche
    SET HANDLER me-&gt;handler_task_error_result FOR ls_task_list-task_instance.  &quot;Tâche en erreur

  ENDDO.

  &quot; -----------------------------------------------------------
  &quot; Création de l&apos;Handler
  &quot; -----------------------------------------------------------

  TRY.
      &quot; Création de l&apos;instance Handler de la Tâche
      me-&gt;mo_task_handler = zcl_task_handler=&gt;handler_factory(
          io_task_manager      = me
          is_process_by_form   = is_process_by_form
          is_process_by_method = is_process_by_method
      ).

    CATCH cx_root INTO lo_cx_exception.
      &quot; Une erreur est survenue
      RAISE EXCEPTION TYPE zcx_task_manager
        EXPORTING
          previous = lo_cx_exception.

  ENDTRY.

  &quot; -----------------------------------------------------------
  &quot; Traitement de fin
  &quot; -----------------------------------------------------------

  IF me-&gt;mt_task_list[] IS INITIAL.
    &quot; Aucune Tâche n&apos;a été créée
    &quot;&quot;  --&gt; Lève une Exception
    ls_textid-msgid = zif_task_constant=&gt;mc_message_class_id.
    ls_textid-msgno = 103.
    RAISE EXCEPTION TYPE zcx_task_manager
      EXPORTING
        textid = ls_textid.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_MANAGER" CMPNAME="HANDLER_TASK_END" VERSION="1" LANGU="F" DESCRIPT="Handler fin d&apos;une Tâche" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="ZCL_TASK" REFCMPNAME="TASK_END" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="HANDLER_TASK_END" SCONAME="IO_TASK" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <source>METHOD HANDLER_TASK_END.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : HANDLER_TASK_END                                  *
*&amp; Classe          : ZCL_TASK_MANAGER                                  *
*&amp; Description     : Handler sur évènement ZCL_TASK=&gt;TASK_END          *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Retourne les données
  &quot; -----------------------------------------------------------

  &quot; Lève évènement pour exporter les données
  RAISE EVENT manager_end_of_task
    EXPORTING
      iv_error         = abap_false
      iv_function_name = io_task-&gt;ms_task_data-task_process-function_name
      it_result        = io_task-&gt;ms_task_data-task_process-task_container-&gt;mt_function_parameters_output
      it_attached_data = io_task-&gt;ms_task_data-task_process-task_container-&gt;mt_attached_data.

  &quot; -----------------------------------------------------------
  &quot; Libère la Tâche
  &quot; -----------------------------------------------------------

  &quot; Libère la Tâche et réinitialise ses données
  io_task-&gt;task_free( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_MANAGER" CMPNAME="HANDLER_TASK_ERROR_RESULT" VERSION="1" LANGU="F" DESCRIPT="Handler Erreur Tâche" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="ZCL_TASK" REFCMPNAME="TASK_ERROR_RECEIVE_RESULT" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="HANDLER_TASK_ERROR_RESULT" SCONAME="IO_TASK" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="HANDLER_TASK_ERROR_RESULT" SCONAME="IS_TEXTID" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <source>METHOD handler_task_error_result.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : HANDLER_TASK_ERROR                                *
*&amp; Classe          : ZCL_TASK_MANAGER                                  *
*&amp; Description     : Handler sur évènement ZCL_TASK=&gt;TASK_ERROR        *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                             TABLES                                 **
***------------------------------------------------------------------***
  DATA :
    lt_result TYPE zif_task_constant=&gt;ty_t_function_parameters.

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_result TYPE zif_task_constant=&gt;ty_function_parameters.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Retourne les données
  &quot; -----------------------------------------------------------

  &quot; Ajout de l&apos;erreur dans la table des résultats
  ls_result-parameter_name = &apos;ERROR&apos;.
  ls_result-parameter_data = ref #( is_textid ).
  APPEND ls_result TO lt_result.

  &quot; Lève évènement pour exporter les données
  RAISE EVENT manager_end_of_task
    EXPORTING
      iv_error         = abap_true
      iv_function_name = io_task-&gt;ms_task_data-task_process-function_name
      it_result        = lt_result
      it_attached_data = io_task-&gt;ms_task_data-task_process-task_container-&gt;mt_attached_data.

  &quot; -----------------------------------------------------------
  &quot; Libère la Tâche
  &quot; -----------------------------------------------------------

  &quot; Libère la Tâche et réinitialise ses données
  io_task-&gt;task_stop( ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TASK_CONTAINER_CREATE" VERSION="1" LANGU="F" DESCRIPT="Création nouveau Container" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TASK_CONTAINER_CREATE" SCONAME="RO_TASK_CONTAINER" VERSION="1" LANGU="F" DESCRIPT="Container paramètres d&apos;appel" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TASK_CONTAINER"/>
   <source>METHOD task_container_create.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Création nouveau Container d&apos;appel
  &quot; -----------------------------------------------------------

  CREATE OBJECT ro_task_container.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TASK_FINISH_RUNNING" VERSION="1" LANGU="F" DESCRIPT="Fin de toutes les Tâches lancées" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD task_finish_running.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : TASK_FINISH_RUNNING                               *
*&amp; Classe          : ZCL_TASK_MANAGER                                  *
*&amp; Description     : Permet de clôre toutes les Tâches                 *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_task TYPE REF TO zcl_task.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Attente de la fin de toutes les Tâches en cours
  &quot; -----------------------------------------------------------

  DO.
    &quot; Recherche si au moins une Tâche occupée
    LOOP AT me-&gt;mt_task_list TRANSPORTING NO FIELDS
                                    WHERE task_running-&gt;* = abap_true         &quot;Tâche en cours de traitement
                                       OR task_running-&gt;* = abap_undefined.   &quot;Tâche en cours de préparation
      &quot;&quot;  --&gt; Au moins une Tâche occupé
      EXIT.
    ENDLOOP.
    IF sy-subrc NE 0.
      &quot; Aucune Tâche en cours de traitement
      &quot;&quot;  --&gt; Arrêt du traitement
      RETURN.

    ENDIF.

    &quot; Attente de fin de traitement d&apos;une Tâche
    WAIT FOR ASYNCHRONOUS TASKS UNTIL lo_task IS BOUND UP TO 1 SECONDS.
    IF sy-subrc EQ 0.
      &quot; Condition vraie

    ENDIF.

  ENDDO.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TASK_GET_FREE" VERSION="1" LANGU="F" DESCRIPT="Récupération Tâche disponible" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TASK_GET_FREE" SCONAME="RO_TASK" VERSION="1" LANGU="F" DESCRIPT="Instance Tâche" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TASK"/>
   <source>METHOD task_get_free.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : TASK_GET_FREE                                     *
*&amp; Classe          : ZCL_TASK_MANAGER                                  *
*&amp; Description     : Récupération d&apos;une Tâche disponible               *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  FREE : ro_task.

  &quot; -----------------------------------------------------------
  &quot; Récupération d&apos;une Tâche finie
  &quot; -----------------------------------------------------------

  TRY.
      &quot; Récupération instance de la Tâche
      ro_task = me-&gt;mt_task_list[ task_running-&gt;* = abap_false ]-task_instance.

    CATCH cx_sy_itab_line_not_found.
      &quot; Aucune Tâche finie
      FREE : ro_task.

    CATCH cx_root.
      &quot; Autre erreur

  ENDTRY.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TASK_START_NEW" VERSION="1" LANGU="F" DESCRIPT="Lancement nouvelle Tâche" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TASK_START_NEW" SCONAME="IV_FUNCTION_NAME" VERSION="1" LANGU="F" DESCRIPT="Nom de fonction" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FUNCNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TASK_START_NEW" SCONAME="IT_FUNCTION_PARAMETERS" VERSION="1" LANGU="F" DESCRIPT="Paramètres d&apos;appel" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIF_TASK_CONSTANT=&gt;TY_T_FUNCTION_PARAMETERS" PAROPTIONL="X" PARPREFERD="X"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TASK_START_NEW" SCONAME="IT_ATTACHED_DATA" VERSION="1" LANGU="F" DESCRIPT="Données liées à la Tâche" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ZIF_TASK_CONSTANT=&gt;TY_T_TASK_ATTACHED_DATA" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TASK_START_NEW" SCONAME="IO_TASK_CONTAINER" VERSION="1" LANGU="F" DESCRIPT="Container paramètres d&apos;appel" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_TASK_CONTAINER" PAROPTIONL="X"/>
   <exception CLSNAME="ZCL_TASK_MANAGER" CMPNAME="TASK_START_NEW" SCONAME="ZCX_TASK_MANAGER" VERSION="1" LANGU="F" DESCRIPT="Classe Exception Tâche" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD task_start_new.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : TASK_START_NEW                                    *
*&amp; Classe          : ZCL_TASK_MANAGER                                  *
*&amp; Description     : Début d&apos;une nouvelle Tâche                        *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_task           TYPE REF TO zcl_task,
    lo_cx_task        TYPE REF TO zcx_task,
    lo_task_container TYPE REF TO zcl_task_container.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Initialisation variable locale
  &quot; -----------------------------------------------------------

  IF io_task_container IS BOUND.
    &quot; Utilisation Container Tâche
    &quot;&quot;  --&gt; Copie des paramètres en local
    lo_task_container = io_task_container-&gt;copy_get( ).

  ELSE.
    &quot; Utilisation paramètres liste
    &quot;&quot;  --&gt; Création Container avec ces données
    CREATE OBJECT lo_task_container
      EXPORTING
        it_attached_data       = it_attached_data
        it_function_parameters = it_function_parameters.

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Récupération d&apos;une Tâche disponible
  &quot; -----------------------------------------------------------

  &quot; Récupération d&apos;une Tâche libre
  lo_task = me-&gt;task_get_free( ).
  IF NOT lo_task IS BOUND.
    &quot; Aucune Tâche disponible
    &quot;&quot;  --&gt; Attente fin de traitement d&apos;une Tâche
    WHILE NOT lo_task IS BOUND.   &quot;Tant qu&apos;aucune Tâche n&apos;est disponible
      &quot; Attente de fin de traitement d&apos;une Tâche
      WAIT FOR ASYNCHRONOUS TASKS UNTIL lo_task IS BOUND UP TO 1 SECONDS.
      IF sy-subrc NE 0.
        &quot; ID non renseigné
        &quot;&quot;  --&gt; Récupération instance Tâche Libre
        lo_task = me-&gt;task_get_free( ).

      ELSE.
        &quot; ID renseigné
        &quot;&quot;  --&gt; Passe à l&apos;étape suivante
        EXIT.

      ENDIF.

    ENDWHILE.                   &quot;Fin d&apos;attente disponibilité d&apos;une Tâche

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Lancement de la Tâche
  &quot; -----------------------------------------------------------

  TRY.
      &quot; Lancement de la Tâche avec les paramètres fournis
      lo_task-&gt;task_start(
        iv_function_name  = iv_function_name
        io_task_container = lo_task_container
      ).

      &quot; Réinitialisation du Container
      lo_task_container-&gt;reset( ).

    CATCH zcx_task INTO lo_cx_task.
      &quot; Erreur lors de l&apos;appel
      &quot;&quot;  --&gt; Lève une Exception
      RAISE EXCEPTION TYPE zcx_task_manager
        EXPORTING
          previous = lo_cx_task.

  ENDTRY.

  IF io_task_container IS BOUND.
    &quot; Réinitialisation Container d&apos;entrée
    io_task_container-&gt;reset( ).

  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_TYPE_DEFINITION" VERSION="1" LANGU="F" DESCRIPT="SHM - Classe utilitaire Définition de Type" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="MO_ATTACH_READ" VERSION="1" LANGU="F" DESCRIPT="Area pour définition de Type" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_TYPE_DEF_AREAHANDLE_AREA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="MO_INSTANCE" VERSION="1" LANGU="F" DESCRIPT="SHM - Classe utilitaire Définition de Type" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_TYPE_DEFINITION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="F" DESCRIPT="CONSTRUCTOR" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD constructor.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : CONSTRUCTOR                                       *
*&amp; Classe          : ZCL_TYPE_DEFINITION                               *
*&amp; Description     : Création instance pour utilisation SHM Déf. Type  *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_cx_exception  TYPE REF TO cx_root,
    lo_attach_write  TYPE REF TO zcl_type_def_areahandle_area,
    lo_type_def_root TYPE REF TO zcl_type_def_areahandle_root.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  TRY.
      &quot; -----------------------------------------------------------
      &quot; Récupération version courante
      &quot; -----------------------------------------------------------

    &quot; Lecture de la version courante
      me-&gt;mo_attach_read = zcl_type_def_areahandle_area=&gt;attach_for_read( ).

    CATCH cx_shm_no_active_version.
      &quot; Aucune version existante
      TRY.
          &quot;&quot;  --&gt; Création instance d&apos;écriture
          lo_attach_write = zcl_type_def_areahandle_area=&gt;attach_for_write( ).

          &quot;&quot;  --&gt; Création d&apos;une nouvelle version
          CREATE OBJECT lo_type_def_root AREA HANDLE lo_attach_write.

          &quot;&quot;  --&gt; Initialisation de la version
          lo_attach_write-&gt;set_root( lo_type_def_root ).

          &quot;&quot;  --&gt; Sauvegarde la version
          lo_attach_write-&gt;detach_commit( ).

          &quot;&quot;  --&gt; Récupère l&apos;instance de lecture
          me-&gt;mo_attach_read = zcl_type_def_areahandle_area=&gt;attach_for_read( ).

        CATCH cx_root INTO lo_cx_exception.
          &quot; Une erreur est survenue
          &quot;&quot;  --&gt; Lève l&apos;exception
          WHILE lo_cx_exception-&gt;previous IS BOUND. lo_cx_exception = lo_cx_exception-&gt;previous. ENDWHILE.
          RAISE EXCEPTION lo_cx_exception.

      ENDTRY.

  ENDTRY.

  &quot; Initialisation instance courante
  zcl_type_definition=&gt;mo_instance = me.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="DEFINITION_TYPE_ADD" VERSION="1" LANGU="F" DESCRIPT="Ajout définition d&apos;un Type" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="DEFINITION_TYPE_ADD" SCONAME="IO_DEFINITION" VERSION="1" LANGU="F" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_ABAP_TYPEDESCR"/>
   <source>METHOD definition_type_add.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : DEFINITION_TYPE_ADD                               *
*&amp; Classe          : ZCL_TYPE_DEFINITION                               *
*&amp; Description     : Ajout définition de Type                          *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_cx_exception  TYPE REF TO cx_root,
    lo_attach_update TYPE REF TO zcl_type_def_areahandle_area.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; Détermine si la définition de Type existe déjà
  IF me-&gt;mo_attach_read-&gt;root-&gt;definition_type_exist( io_definition-&gt;absolute_name ) EQ abap_true.
    &quot; La définition du Type existe déjà
    &quot;&quot;  --&gt; Arrêt du traitement
    RETURN.

  ENDIF.

  TRY.
      &quot;&quot;  --&gt;  Récupération instance de mise à jour
      lo_attach_update = zcl_type_def_areahandle_area=&gt;attach_for_update( ).

      &quot;&quot;  --&gt; Ajout de la définition de type
      lo_attach_update-&gt;root-&gt;definition_type_add( io_definition ).

      &quot;&quot;  --&gt; Pousse la mise à jour
      lo_attach_update-&gt;detach_commit( ).

      IF me-&gt;mo_attach_read-&gt;is_active_version( ) EQ abap_false.
        &quot;&quot;  --&gt; Libère le Token courant
        me-&gt;mo_attach_read-&gt;detach( ).

        &quot;&quot;  --&gt; Recharge l&apos;instance de lecture
        me-&gt;mo_attach_read = zcl_type_def_areahandle_area=&gt;attach_for_read( ).

      ENDIF.

    CATCH cx_root INTO lo_cx_exception.
      &quot; Une erreur est survenue
      &quot;&quot;  --&gt; Lève l&apos;exception
      WHILE lo_cx_exception-&gt;previous IS BOUND. lo_cx_exception = lo_cx_exception-&gt;previous. ENDWHILE.
      RAISE EXCEPTION lo_cx_exception.

  ENDTRY.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="DEFINITION_TYPE_FINISH" VERSION="1" LANGU="F" DESCRIPT="Ferme les versions courantes" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>METHOD definition_type_finish.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : DEFINITION_TYPE_FINISH                            *
*&amp; Classe          : ZCL_TYPE_DEFINITION                               *
*&amp; Description     : Ferme les Tokens SHM                              *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  IF  me-&gt;mo_attach_read IS BOUND
  AND me-&gt;mo_attach_read-&gt;is_valid( ) EQ abap_true.
    &quot; Libération Token de lecture
    me-&gt;mo_attach_read-&gt;detach( ).

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="DEFINITION_TYPE_GET" VERSION="1" LANGU="F" DESCRIPT="Récupération définition d&apos;un Type" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="DEFINITION_TYPE_GET" SCONAME="IV_TYPE" VERSION="1" LANGU="F" DESCRIPT="Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CLIKE"/>
   <parameter CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="DEFINITION_TYPE_GET" SCONAME="RO_DEFINITION" VERSION="1" LANGU="F" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_TYPEDESCR"/>
   <source>METHOD definition_type_get.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : DEFINITION_TYPE_GET                               *
*&amp; Classe          : ZCL_TYPE_DEFINITION                               *
*&amp; Description     : Récupération définition de Type                   *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_cx_exception TYPE REF TO cx_root.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; Retourne la définition du Type
  ro_definition = me-&gt;mo_attach_read-&gt;root-&gt;definition_type_get( iv_type ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="GET_INSTANCE" VERSION="1" LANGU="F" DESCRIPT="Récupération Instance" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="GET_INSTANCE" SCONAME="RO_INSTANCE" VERSION="1" LANGU="F" DESCRIPT="SHM - Classe utilitaire Définition de Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TYPE_DEFINITION"/>
   <source>METHOD get_instance.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : GET_INSTANCE                                      *
*&amp; Classe          : ZCL_TYPE_DEFINITION                               *
*&amp; Description     : Récupération instance utilisation SHM Déf. Type   *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  IF NOT zcl_type_definition=&gt;mo_instance IS BOUND.
    &quot; Création d&apos;une nouvelle instance
    CREATE OBJECT zcl_type_definition=&gt;mo_instance.

  ELSEIF NOT zcl_type_definition=&gt;mo_instance-&gt;mo_attach_read IS BOUND
          OR zcl_type_definition=&gt;mo_instance-&gt;mo_attach_read-&gt;is_valid( )          EQ abap_false
          OR zcl_type_definition=&gt;mo_instance-&gt;mo_attach_read-&gt;is_active_version( ) EQ abap_false.
    &quot; Instance existante mais sans canal de lecture ou pas dans la version active
    &quot;&quot;  --&gt; Libère les Tokens existant sur cette version
    zcl_type_definition=&gt;mo_instance-&gt;definition_type_finish( ).

    &quot;&quot;  --&gt; Libération de l&apos;instance
    FREE : zcl_type_definition=&gt;mo_instance.

    &quot;&quot;  --&gt; Création nouvelle instance
    CREATE OBJECT zcl_type_definition=&gt;mo_instance.

  ENDIF.

  &quot; Retourne l&apos;instance
  ro_instance = zcl_type_definition=&gt;mo_instance.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="__INTERNAL_USE_FREE_SHM" VERSION="1" LANGU="F" DESCRIPT="Supprime toutes les versions" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="__INTERNAL_USE_FREE_SHM" SCONAME="IV_AREAS_DETACH" VERSION="1" LANGU="F" DESCRIPT="Libére les Tokens" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="__INTERNAL_USE_FREE_SHM" SCONAME="IV_AREAS_FREE" VERSION="1" LANGU="F" DESCRIPT="Supprime les Versions" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="__INTERNAL_USE_FREE_SHM" SCONAME="IV_AREAS_INVALIDATE" VERSION="1" LANGU="F" DESCRIPT="Invalide les Versions" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TYPE_DEFINITION" CMPNAME="__INTERNAL_USE_FREE_SHM" SCONAME="RV_RC" VERSION="1" LANGU="F" DESCRIPT="Valeur de retour (constantes dans CL_SHM_AREA)" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SHM_RC"/>
   <source>METHOD __internal_use_free_shm.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  IF iv_areas_free EQ abap_true.
    TRY.
        &quot; Libération des Versions
        rv_rc = zcl_type_def_areahandle_area=&gt;detach_all_areas( ).
        rv_rc = zcl_type_def_areahandle_area=&gt;free_area( ).

      CATCH cx_shm_parameter_error.    &quot;
        rv_rc = cl_shm_area=&gt;rc_nothing_to_be_done.

    ENDTRY.

    RETURN.

  ENDIF.

  IF iv_areas_invalidate EQ abap_true.
    TRY.
        &quot; Invalide les Versions
        rv_rc = zcl_type_def_areahandle_area=&gt;detach_all_areas( ).
        rv_rc = zcl_type_def_areahandle_area=&gt;invalidate_area( ).

      CATCH cx_shm_parameter_error.
        rv_rc = cl_shm_area=&gt;rc_nothing_to_be_done.

    ENDTRY.

    RETURN.

  ENDIF.

  IF iv_areas_detach EQ abap_true.
    &quot; Libération des Tokens
    rv_rc = zcl_type_def_areahandle_area=&gt;detach_all_areas( ).

  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" VERSION="1" LANGU="F" DESCRIPT="Area pour définition de Type" CATEGORY="45" EXPOSURE="0" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" RSTAT="S" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="CL_SHM_AREA">
  <friends CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" REFCLSNAME="CL_SHM_AREA" FRIENDTYPE="0" VERSION="1" STATE="1"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros></localMacros>
  <attribute CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="AREA_NAME" VERSION="1" LANGU="F" DESCRIPT="Name of an Area Class" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;ZCL_TYPE_DEF_AREAHANDLE_AREA&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SHM_AREA_NAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ROOT" VERSION="1" LANGU="F" DESCRIPT="SHM: Model of a Data Class" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTRDONLY="X" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZCL_TYPE_DEF_AREAHANDLE_ROOT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="_CLIENT_DEPENDENT" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="ABAP_FALSE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="_LIFE_CONTEXT" VERSION="1" LANGU="F" DESCRIPT="Lifetime of an Area (Constants in CL_SHM_AREA)" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="CL_SHM_AREA=&gt;LIFE_CONTEXT_APPSERVER" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SHM_LIFE_CONTEXT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="_TRACE_ACTIVE" VERSION="1" LANGU="F" DESCRIPT="(Internal) Flag: Trace Active?" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="1" ATTVALUE="ABAP_FALSE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="_TRACE_SERVICE" VERSION="1" LANGU="F" DESCRIPT="(Internal) Reference to Trace Class" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="1" ATTEXPVIRT="0" TYPTYPE="3" TYPE="IF_SHM_TRACE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="_TRANSACTIONAL" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="ABAP_FALSE" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="_VERSION_" VERSION="1" LANGU="F" DESCRIPT="(internal)" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="21" ATTEXPVIRT="0" TYPTYPE="1" TYPE="I" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" REFCLSNAME="CL_SHM_AREA" VERSION="1" STATE="1">
   <redefinition CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" REFCLSNAME="CL_SHM_AREA" VERSION="1" MTDNAME="GET_ROOT" EXPOSURE="0"/>
  </inheritance>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_READ" VERSION="1" LANGU="F" DESCRIPT="Request a Read Lock" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_READ" SCONAME="INST_NAME" VERSION="1" LANGU="F" DESCRIPT="Name of a Shared Object Instance of an Area" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SHM_INST_NAME" PARVALUE="CL_SHM_AREA=&gt;DEFAULT_INSTANCE" PAROPTIONL="X" PARPREFERD="X"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_READ" SCONAME="HANDLE" VERSION="1" LANGU="F" DESCRIPT="SHM: Model of an Area Class" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TYPE_DEF_AREAHANDLE_AREA"/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_READ" SCONAME="CX_SHM_INCONSISTENT" VERSION="1" LANGU="F" DESCRIPT="Different Definitions Between Program and Area" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_READ" SCONAME="CX_SHM_NO_ACTIVE_VERSION" VERSION="1" LANGU="F" DESCRIPT="No active version exists for an attach" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_READ" SCONAME="CX_SHM_READ_LOCK_ACTIVE" VERSION="1" LANGU="F" DESCRIPT="Request for a Second Read Lock" MTDTYPE="0" EDITORDER="3 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_READ" SCONAME="CX_SHM_EXCLUSIVE_LOCK_ACTIVE" VERSION="1" LANGU="F" DESCRIPT="Instance Already Locked" MTDTYPE="0" EDITORDER="4 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_READ" SCONAME="CX_SHM_PARAMETER_ERROR" VERSION="1" LANGU="F" DESCRIPT="Incorrect parameter transferred" MTDTYPE="0" EDITORDER="5 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_READ" SCONAME="CX_SHM_CHANGE_LOCK_ACTIVE" VERSION="1" LANGU="F" DESCRIPT="A Change Lock Is Already Active" MTDTYPE="0" EDITORDER="6 "/>
   <source>method ATTACH_FOR_READ.

  DATA:
    l_attributes       TYPE shma_attributes,
    l_root             TYPE REF TO object,
    l_cx               TYPE REF TO cx_root,
    l_client           TYPE shm_client,
    l_client_supplied  TYPE abap_bool. &quot;#EC NEEDED

* check if tracing should be activated/de-activated
  IF  ( NOT _trace_service IS INITIAL ).
    TRY.
        _trace_active =
          cl_shm_service=&gt;trace_is_variant_active(
            _trace_service-&gt;variant-def_name
          ).
      CATCH cx_root. &quot;#EC NO_HANDLER
                     &quot;#EC CATCH_ALL
    ENDTRY.
  ENDIF.


  IF _trace_active = abap_false OR
  _trace_service-&gt;variant-attach_for_read = abap_false.

*   &gt;

    CREATE OBJECT handle.

    handle-&gt;client    = l_client.
    handle-&gt;inst_name = inst_name.

*   try sneak mode first
    handle-&gt;_attach_read71( EXPORTING area_name    = area_name
                                      sneak_mode   = abap_true
                                      life_context = _life_context
                            IMPORTING root         = l_root ).

    IF l_root IS INITIAL.
*     no root object returned, sneak mode was not successful.
*     -&gt; read area properties from database and try again.
      cl_shm_service=&gt;initialize(
        EXPORTING area_name       = handle-&gt;area_name
                  client          = l_client
        IMPORTING attributes      = l_attributes
      ).

      handle-&gt;properties = l_attributes-properties.
      handle-&gt;_attach_read71( EXPORTING area_name    = area_name
                                        sneak_mode   = abap_false
                                        life_context = _life_context
                              IMPORTING root         = l_root ).

    ENDIF.

    handle-&gt;root ?= l_root.
*   &lt;

  ELSE.

    TRY.

*       &gt;

        CREATE OBJECT handle.

        handle-&gt;client    = l_client.
        handle-&gt;inst_name = inst_name.

        handle-&gt;_attach_read71( EXPORTING area_name    = area_name
                                          sneak_mode   = abap_true
                                          life_context = _life_context
                                IMPORTING root         = l_root ).

        IF l_root IS INITIAL.
*         no root object returned, sneak mode was not successful.
*         -&gt; read area properties from database and try again.
          cl_shm_service=&gt;initialize(
            EXPORTING area_name       = handle-&gt;area_name
                      client          = l_client
            IMPORTING attributes      = l_attributes
          ).

          handle-&gt;properties = l_attributes-properties.
          handle-&gt;_attach_read71( EXPORTING area_name    = area_name
                                            sneak_mode   = abap_false
                                            life_context = _life_context
                                  IMPORTING root         = l_root ).

        ENDIF.
        handle-&gt;root ?= l_root.

*       &lt;
        _trace_service-&gt;trin_attach_for_read(
          area_name = area_name
          inst_name = inst_name
          client    = l_client ).

      CLEANUP INTO l_cx.
        _trace_service-&gt;trcx_attach_for_read(
          area_name = area_name
          inst_name = inst_name
          client    = l_client
          cx        = l_cx
        ).
    ENDTRY.

  ENDIF.

  handle-&gt;inst_trace_service = _trace_service.
  handle-&gt;inst_trace_active  = _trace_active.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_UPDATE" VERSION="1" LANGU="F" DESCRIPT="Request a Change Lock" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_UPDATE" SCONAME="INST_NAME" VERSION="1" LANGU="F" DESCRIPT="Name of a Shared Object Instance of an Area" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SHM_INST_NAME" PARVALUE="CL_SHM_AREA=&gt;DEFAULT_INSTANCE" PAROPTIONL="X" PARPREFERD="X"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_UPDATE" SCONAME="ATTACH_MODE" VERSION="1" LANGU="F" DESCRIPT="Mode of ATTACH (Constants in CL_SHM_AREA)" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SHM_ATTACH_MODE" PARVALUE="CL_SHM_AREA=&gt;ATTACH_MODE_DEFAULT"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_UPDATE" SCONAME="WAIT_TIME" VERSION="1" LANGU="F" DESCRIPT="Maximum Wait Time (in Milliseconds)" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_UPDATE" SCONAME="HANDLE" VERSION="1" LANGU="F" DESCRIPT="SHM: Model of an Area Class" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TYPE_DEF_AREAHANDLE_AREA"/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_UPDATE" SCONAME="CX_SHM_INCONSISTENT" VERSION="1" LANGU="F" DESCRIPT="Different Definitions Between Program and Area" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_UPDATE" SCONAME="CX_SHM_NO_ACTIVE_VERSION" VERSION="1" LANGU="F" DESCRIPT="No active version exists for an attach" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_UPDATE" SCONAME="CX_SHM_EXCLUSIVE_LOCK_ACTIVE" VERSION="1" LANGU="F" DESCRIPT="Instance Already Locked" MTDTYPE="0" EDITORDER="3 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_UPDATE" SCONAME="CX_SHM_VERSION_LIMIT_EXCEEDED" VERSION="1" LANGU="F" DESCRIPT="No Additional Versions Available" MTDTYPE="0" EDITORDER="4 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_UPDATE" SCONAME="CX_SHM_CHANGE_LOCK_ACTIVE" VERSION="1" LANGU="F" DESCRIPT="A write lock is already active" MTDTYPE="0" EDITORDER="5 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_UPDATE" SCONAME="CX_SHM_PARAMETER_ERROR" VERSION="1" LANGU="F" DESCRIPT="Passed Parameter Has Incorrect Value" MTDTYPE="0" EDITORDER="6 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_UPDATE" SCONAME="CX_SHM_PENDING_LOCK_REMOVED" VERSION="1" LANGU="F" DESCRIPT="Shared Objects: Waiting Lock Was Deleted" MTDTYPE="0" EDITORDER="7 "/>
   <source>method ATTACH_FOR_UPDATE.

  DATA:
    l_attributes             TYPE shma_attributes,
    l_root                   TYPE REF TO object,
    l_cx                     TYPE REF TO cx_root,
    l_client                 TYPE shm_client,
    l_client_supplied        TYPE abap_bool, &quot;#EC NEEDED
    l_wait_time              TYPE i,
    l_wait_time_per_loop     TYPE i,
    l_wait_time_per_loop_sec TYPE f.

  l_wait_time = wait_time.

* check if tracing should be activated/de-activated
  IF  ( NOT _trace_service IS INITIAL ).
    TRY.
        _trace_active =
          cl_shm_service=&gt;trace_is_variant_active(
            _trace_service-&gt;variant-def_name
          ).
      CATCH cx_root. &quot;#EC NO_HANDLER
                     &quot;#EC CATCH_ALL
    ENDTRY.
  ENDIF.


  IF _trace_active = abap_false OR
  _trace_service-&gt;variant-attach_for_upd = abap_false.

*   &gt;

    CREATE OBJECT handle.

    handle-&gt;client    = l_client.
    handle-&gt;inst_name = inst_name.

    cl_shm_service=&gt;initialize(
      EXPORTING area_name    = handle-&gt;area_name
                client       = l_client
      IMPORTING attributes   = l_attributes
    ).

    handle-&gt;properties = l_attributes-properties.

    handle-&gt;_attach_update70(
      EXPORTING area_name = handle-&gt;area_name
                mode      = attach_mode
      IMPORTING root      = l_root
      CHANGING  wait_time = l_wait_time ).

    IF abap_true = l_attributes-properties-has_versions AND
       handle-&gt;_lock IS NOT INITIAL.
* we may need a second try in case of class constructors
      handle-&gt;_attach_update70(
        EXPORTING area_name = handle-&gt;area_name
                  mode      = attach_mode
        IMPORTING root      = l_root
        CHANGING  wait_time = l_wait_time ).
    ENDIF.

    IF attach_mode = cl_shm_area=&gt;attach_mode_wait AND
       handle-&gt;_lock IS INITIAL.

      l_wait_time_per_loop = l_wait_time / 10.
* wait_time_per_loop should be at least 2 * SHMATTACHWRITE_MAXACTIVEWAIT
      IF l_wait_time_per_loop &lt; 2000.
        l_wait_time_per_loop = 2000.
      ELSEIF l_wait_time_per_loop &gt; 300000.
        l_wait_time_per_loop = 300000.
      ENDIF.

      l_wait_time_per_loop_sec = l_wait_time_per_loop / 1000.

      WHILE handle-&gt;_lock IS INITIAL.

        IF l_wait_time_per_loop &gt; l_wait_time.
          l_wait_time_per_loop = l_wait_time.
          l_wait_time_per_loop_sec = l_wait_time_per_loop / 1000.
        ENDIF.

        WAIT UP TO l_wait_time_per_loop_sec SECONDS.
        l_wait_time = l_wait_time - l_wait_time_per_loop.

        handle-&gt;_attach_update70(
          EXPORTING area_name = handle-&gt;area_name
                    mode      = cl_shm_area=&gt;attach_mode_wait_2nd_try
          IMPORTING root      = l_root
          CHANGING  wait_time = l_wait_time ).

        IF abap_true = l_attributes-properties-has_versions AND
           handle-&gt;_lock IS NOT INITIAL.
* we may need a second try in case of class constructors
          handle-&gt;_attach_update70(
            EXPORTING area_name = handle-&gt;area_name
                      mode      = cl_shm_area=&gt;attach_mode_wait_2nd_try
            IMPORTING root      = l_root
            CHANGING  wait_time = l_wait_time ).
        ENDIF.

      ENDWHILE.

    ENDIF.

    handle-&gt;root ?= l_root.

*   &lt;

  ELSE.

    TRY.

*       &gt;

        CREATE OBJECT handle.

        handle-&gt;client    = l_client.
        handle-&gt;inst_name = inst_name.

        cl_shm_service=&gt;initialize(
          EXPORTING area_name    = handle-&gt;area_name
                    client       = l_client
          IMPORTING attributes   = l_attributes
        ).

        handle-&gt;properties = l_attributes-properties.

        handle-&gt;_attach_update70(
          EXPORTING area_name = handle-&gt;area_name
                    mode      = attach_mode
          IMPORTING root      = l_root
          CHANGING  wait_time = l_wait_time ).

        IF abap_true = l_attributes-properties-has_versions AND
           handle-&gt;_lock IS NOT INITIAL.
* we may need a second try in case of class constructors
          handle-&gt;_attach_update70(
            EXPORTING area_name = handle-&gt;area_name
                      mode      = attach_mode
            IMPORTING root      = l_root
            CHANGING  wait_time = l_wait_time ).
        ENDIF.

        IF attach_mode = cl_shm_area=&gt;attach_mode_wait AND
           handle-&gt;_lock IS INITIAL.

          l_wait_time_per_loop = l_wait_time / 10.
* wait_time_per_loop should be at least 2 * SHMATTACHWRITE_MAXACTIVEWAIT
          IF l_wait_time_per_loop &lt; 2000.
            l_wait_time_per_loop = 2000.
          ELSEIF l_wait_time_per_loop &gt; 300000.
            l_wait_time_per_loop = 300000.
          ENDIF.

          l_wait_time_per_loop_sec = l_wait_time_per_loop / 1000.

          WHILE handle-&gt;_lock IS INITIAL.

            IF l_wait_time_per_loop &gt; l_wait_time.
              l_wait_time_per_loop = l_wait_time.
              l_wait_time_per_loop_sec = l_wait_time_per_loop / 1000.
            ENDIF.

            WAIT UP TO l_wait_time_per_loop_sec SECONDS.
            l_wait_time = l_wait_time - l_wait_time_per_loop.

            handle-&gt;_attach_update70(
              EXPORTING
                area_name = handle-&gt;area_name
                mode      = cl_shm_area=&gt;attach_mode_wait_2nd_try
              IMPORTING
                root      = l_root
              CHANGING
                wait_time = l_wait_time ).

            IF abap_true = l_attributes-properties-has_versions AND
               handle-&gt;_lock IS NOT INITIAL.
* we may need a second try in case of class constructors
              handle-&gt;_attach_update70(
                EXPORTING
                  area_name = handle-&gt;area_name
                  mode      = cl_shm_area=&gt;attach_mode_wait_2nd_try
                IMPORTING
                  root      = l_root
                CHANGING
                  wait_time = l_wait_time ).
            ENDIF.

          ENDWHILE.

        ENDIF.

        handle-&gt;root ?= l_root.

*       &lt;
        _trace_service-&gt;trin_attach_for_update(
          area_name = area_name
          inst_name = inst_name
          client    = l_client
          mode      = attach_mode
          wait_time = wait_time
        ).

      CLEANUP INTO l_cx.
        _trace_service-&gt;trcx_attach_for_update(
          area_name = area_name
          inst_name = inst_name
          client    = l_client
          mode      = attach_mode
          wait_time = wait_time
          cx        = l_cx
        ).
    ENDTRY.

  ENDIF.

  handle-&gt;inst_trace_service = _trace_service.
  handle-&gt;inst_trace_active  = _trace_active.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_WRITE" VERSION="1" LANGU="F" DESCRIPT="Request a Write Lock" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_WRITE" SCONAME="INST_NAME" VERSION="1" LANGU="F" DESCRIPT="Name of a Shared Object Instance of an Area" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SHM_INST_NAME" PARVALUE="CL_SHM_AREA=&gt;DEFAULT_INSTANCE" PAROPTIONL="X" PARPREFERD="X"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_WRITE" SCONAME="ATTACH_MODE" VERSION="1" LANGU="F" DESCRIPT="Mode of ATTACH (Constants in CL_SHM_AREA)" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SHM_ATTACH_MODE" PARVALUE="CL_SHM_AREA=&gt;ATTACH_MODE_DEFAULT"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_WRITE" SCONAME="WAIT_TIME" VERSION="1" LANGU="F" DESCRIPT="Maximum Wait Time (in Milliseconds)" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="0"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_WRITE" SCONAME="HANDLE" VERSION="1" LANGU="F" DESCRIPT="SHM: Model of an Area Class" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_TYPE_DEF_AREAHANDLE_AREA"/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_WRITE" SCONAME="CX_SHM_EXCLUSIVE_LOCK_ACTIVE" VERSION="1" LANGU="F" DESCRIPT="Instance Already Locked" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_WRITE" SCONAME="CX_SHM_VERSION_LIMIT_EXCEEDED" VERSION="1" LANGU="F" DESCRIPT="No Additional Versions Available" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_WRITE" SCONAME="CX_SHM_CHANGE_LOCK_ACTIVE" VERSION="1" LANGU="F" DESCRIPT="A write lock is already active" MTDTYPE="0" EDITORDER="3 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_WRITE" SCONAME="CX_SHM_PARAMETER_ERROR" VERSION="1" LANGU="F" DESCRIPT="Passed Parameter Has Incorrect Value" MTDTYPE="0" EDITORDER="4 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="ATTACH_FOR_WRITE" SCONAME="CX_SHM_PENDING_LOCK_REMOVED" VERSION="1" LANGU="F" DESCRIPT="Shared Objects: Waiting Lock Was Deleted" MTDTYPE="0" EDITORDER="5 "/>
   <source>method ATTACH_FOR_WRITE.

  DATA:
    l_attributes             TYPE shma_attributes,
    l_cx                     TYPE REF TO cx_root,
    l_client                 TYPE shm_client,
    l_client_supplied        TYPE abap_bool, &quot;#EC NEEDED
    l_wait_time              TYPE i,
    l_wait_time_per_loop     TYPE i,
    l_wait_time_per_loop_sec TYPE f.

  l_wait_time = wait_time.

* check if tracing should be activated/de-activated
  IF  ( NOT _trace_service IS INITIAL ).
    TRY.
        _trace_active =
          cl_shm_service=&gt;trace_is_variant_active(
            _trace_service-&gt;variant-def_name
          ).
      CATCH cx_root. &quot;#EC NO_HANDLER
                     &quot;#EC CATCH_ALL
    ENDTRY.
  ENDIF.


  IF _trace_active = abap_false OR
  _trace_service-&gt;variant-attach_for_write = abap_false.

*   &gt;

    CREATE OBJECT handle.

    handle-&gt;client    = l_client.
    handle-&gt;inst_name = inst_name.

    cl_shm_service=&gt;initialize(
      EXPORTING area_name    = handle-&gt;area_name
                client       = l_client
      IMPORTING attributes   = l_attributes
    ).

    handle-&gt;properties = l_attributes-properties.

    handle-&gt;_attach_write70(
      EXPORTING
        area_name = handle-&gt;area_name
        mode      = attach_mode
      CHANGING
        wait_time = l_wait_time ).

    IF attach_mode = cl_shm_area=&gt;attach_mode_wait AND
       handle-&gt;_lock IS INITIAL.

      l_wait_time_per_loop = l_wait_time / 10.
* wait_time_per_loop should be at least 2 * SHMATTACHWRITE_MAXACTIVEWAIT
      IF l_wait_time_per_loop &lt; 2000.
        l_wait_time_per_loop = 2000.
      ELSEIF l_wait_time_per_loop &gt; 300000.
        l_wait_time_per_loop = 300000.
      ENDIF.

      l_wait_time_per_loop_sec = l_wait_time_per_loop / 1000.

      WHILE handle-&gt;_lock IS INITIAL.

        IF l_wait_time_per_loop &gt; l_wait_time.
          l_wait_time_per_loop = l_wait_time.
          l_wait_time_per_loop_sec = l_wait_time_per_loop / 1000.
        ENDIF.

        WAIT UP TO l_wait_time_per_loop_sec SECONDS.
        l_wait_time = l_wait_time - l_wait_time_per_loop.

        handle-&gt;_attach_write70(
          EXPORTING
            area_name = handle-&gt;area_name
            mode      = cl_shm_area=&gt;attach_mode_wait_2nd_try
          CHANGING
            wait_time = l_wait_time ).

      ENDWHILE.

    ENDIF.

*   &lt;

  ELSE.

    TRY.

*     &gt;

        CREATE OBJECT handle.

        handle-&gt;client    = l_client.
        handle-&gt;inst_name = inst_name.

        cl_shm_service=&gt;initialize(
          EXPORTING area_name    = handle-&gt;area_name
                    client       = l_client
          IMPORTING attributes   = l_attributes
        ).

        handle-&gt;properties = l_attributes-properties.

        handle-&gt;_attach_write70(
          EXPORTING
            area_name = handle-&gt;area_name
            mode      = attach_mode
          CHANGING
            wait_time = l_wait_time ).

        IF attach_mode = cl_shm_area=&gt;attach_mode_wait AND
           handle-&gt;_lock IS INITIAL.

          l_wait_time_per_loop = l_wait_time / 10.
* wait_time_per_loop should be at least 2 * SHMATTACHWRITE_MAXACTIVEWAIT
          IF l_wait_time_per_loop &lt; 2000.
            l_wait_time_per_loop = 2000.
          ELSEIF l_wait_time_per_loop &gt; 300000.
            l_wait_time_per_loop = 300000.
          ENDIF.

          l_wait_time_per_loop_sec = l_wait_time_per_loop / 1000.

          WHILE handle-&gt;_lock IS INITIAL.

            IF l_wait_time_per_loop &gt; l_wait_time.
              l_wait_time_per_loop = l_wait_time.
              l_wait_time_per_loop_sec = l_wait_time_per_loop / 1000.
            ENDIF.

            WAIT UP TO l_wait_time_per_loop_sec SECONDS.
            l_wait_time = l_wait_time - l_wait_time_per_loop.

            handle-&gt;_attach_write70(
              EXPORTING
                area_name = handle-&gt;area_name
                mode      = cl_shm_area=&gt;attach_mode_wait_2nd_try
              CHANGING
                wait_time = l_wait_time ).

          ENDWHILE.

        ENDIF.

*     &lt;

        _trace_service-&gt;trin_attach_for_write(
          area_name = area_name
          inst_name = inst_name
          client    = l_client
          mode      = attach_mode
          wait_time = wait_time
        ).
      CLEANUP INTO l_cx.
        _trace_service-&gt;trcx_attach_for_write(
          area_name = area_name
          inst_name = inst_name
          client    = l_client
          mode      = attach_mode
          wait_time = wait_time
          cx        = l_cx
        ).
    ENDTRY.

  ENDIF.

  handle-&gt;inst_trace_service = _trace_service.
  handle-&gt;inst_trace_active  = _trace_active.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="BUILD" VERSION="1" LANGU="F" DESCRIPT="Direct Call of Area Constructor" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="BUILD" SCONAME="INST_NAME" VERSION="1" LANGU="F" DESCRIPT="Name of a Shared Object Instance of an Area" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SHM_INST_NAME" PARVALUE="CL_SHM_AREA=&gt;DEFAULT_INSTANCE"/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="BUILD" SCONAME="CX_SHMA_NOT_CONFIGURED" VERSION="1" LANGU="F" DESCRIPT="SHM Administration: Area Property Is Not Configured" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="BUILD" SCONAME="CX_SHMA_INCONSISTENT" VERSION="1" LANGU="F" DESCRIPT="SHM Administration: Inconsistent Attribute Combination" MTDTYPE="0" EDITORDER="2 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="BUILD" SCONAME="CX_SHM_BUILD_FAILED" VERSION="1" LANGU="F" DESCRIPT="Constructor Run Failed" MTDTYPE="0" EDITORDER="3 "/>
   <source>method BUILD.

  DATA:
    l_cls_name TYPE shm_auto_build_class_name,
    l_cx TYPE REF TO cx_root.

  IF _trace_active = abap_false OR
  _trace_service-&gt;variant-build = abap_false.

*   &gt;
    l_cls_name =
      cl_shm_service=&gt;get_auto_build_class_name( area_name ).

    CALL METHOD (l_cls_name)=&gt;if_shm_build_instance~build
      EXPORTING
        inst_name = inst_name.
*   &lt;

  ELSE.

    TRY.

*       &gt;
        l_cls_name =
          cl_shm_service=&gt;get_auto_build_class_name( area_name ).

        CALL METHOD (l_cls_name)=&gt;if_shm_build_instance~build
          EXPORTING
            inst_name = inst_name.
*       &lt;
        _trace_service-&gt;trin_build(
          area_name         = area_name
          inst_name         = inst_name
        ).

      CLEANUP INTO l_cx.
        _trace_service-&gt;trcx_build(
          area_name         = area_name
          inst_name         = inst_name
          cx                = l_cx
        ).
    ENDTRY.

  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" LANGU="F" DESCRIPT="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method CLASS_CONSTRUCTOR.

* TRACE { DO NOT REMOVE THIS LINE !
  _trace_active = abap_false.
  TRY.
      _trace_service =
        cl_shm_service=&gt;trace_get_service( area_name ).
      IF NOT _trace_service IS INITIAL.
        _trace_active =
          cl_shm_service=&gt;trace_is_variant_active(
            _trace_service-&gt;variant-def_name
          ).
      ENDIF.
    CATCH cx_root. &quot;#EC NO_HANDLER
                   &quot;#EC CATCH_ALL
  ENDTRY.
* TRACE } DO NOT REMOVE THIS LINE !

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="DETACH_AREA" VERSION="1" LANGU="F" DESCRIPT="Release all locks on all instances" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="DETACH_AREA" SCONAME="RC" VERSION="1" LANGU="F" DESCRIPT="Detach Return Value (Constants in CL_SHM_AREA)" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SHM_RC"/>
   <source>method DETACH_AREA.

  DATA:
    l_client TYPE shm_client,
    l_client_supplied TYPE abap_bool VALUE abap_false.


* &gt;
  rc = _detach_area71( area_name        = area_name
                       client           = l_client
                       client_supplied  = l_client_supplied
                       client_dependent = _client_dependent
                       life_context     = _life_context
       ).
* &lt;

  IF _trace_active = abap_true.
    IF _trace_service-&gt;variant-detach_area = abap_true.
      _trace_service-&gt;trin_detach_area(
        area_name = area_name
        client    = l_client
        rc        = rc
      ).
    ENDIF.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="FREE_AREA" VERSION="1" LANGU="F" DESCRIPT="Delete all instances" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="FREE_AREA" SCONAME="TERMINATE_CHANGER" VERSION="1" LANGU="F" DESCRIPT="Writing processes will be ended" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="FREE_AREA" SCONAME="RC" VERSION="1" LANGU="F" DESCRIPT="Return Value (Constants in CL_SHM_AREA)" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SHM_RC"/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="FREE_AREA" SCONAME="CX_SHM_PARAMETER_ERROR" VERSION="1" LANGU="F" DESCRIPT="Incorrect parameter transferred" MTDTYPE="0" EDITORDER="1 "/>
   <source>method FREE_AREA.

  DATA:
    l_client TYPE shm_client,
    l_client_supplied TYPE abap_bool VALUE abap_false.

  CONSTANTS: affect_server TYPE shm_affect_server
             VALUE cl_shm_area=&gt;affect_local_server.


* &gt;
  rc = _free_area71( area_name         = area_name
                     client            = l_client
                     client_supplied   = l_client_supplied
                     client_dependent  = _client_dependent
                     transactional     = _transactional
                     terminate_changer = terminate_changer
                     affect_server     = affect_server
                     life_context      = _life_context ).
* &lt;

  IF _trace_active = abap_true.
    IF _trace_service-&gt;variant-free_area = abap_true.
      _trace_service-&gt;trin_free_area(
      area_name         = area_name
      client            = l_client
      terminate_changer = terminate_changer
      affect_server     = affect_server
      rc                = rc
    ).
    ENDIF.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="FREE_INSTANCE" VERSION="1" LANGU="F" DESCRIPT="Deletion of an Instance" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="FREE_INSTANCE" SCONAME="INST_NAME" VERSION="1" LANGU="F" DESCRIPT="Name of a Shared Object Instance of an Area" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SHM_INST_NAME" PARVALUE="CL_SHM_AREA=&gt;DEFAULT_INSTANCE" PAROPTIONL="X" PARPREFERD="X"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="FREE_INSTANCE" SCONAME="TERMINATE_CHANGER" VERSION="1" LANGU="F" DESCRIPT="Writing processes will be ended" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="FREE_INSTANCE" SCONAME="RC" VERSION="1" LANGU="F" DESCRIPT="Return Value (Constants in CL_SHM_AREA)" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SHM_RC"/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="FREE_INSTANCE" SCONAME="CX_SHM_PARAMETER_ERROR" VERSION="1" LANGU="F" DESCRIPT="Incorrect parameter transferred" MTDTYPE="0" EDITORDER="1 "/>
   <source>method FREE_INSTANCE.

  DATA:
    l_client TYPE shm_client,
    l_client_supplied TYPE abap_bool VALUE abap_false.

  CONSTANTS: affect_server TYPE shm_affect_server
             VALUE cl_shm_area=&gt;affect_local_server.


* &gt;
  rc = _free_instance71( area_name         = area_name
                         inst_name         = inst_name
                         client            = l_client
                         client_supplied   = l_client_supplied
                         client_dependent  = _client_dependent
                         transactional     = _transactional
                         terminate_changer = terminate_changer
                         affect_server     = affect_server
                         life_context      = _life_context ).
* &lt;

  IF _trace_active = abap_true.
    IF _trace_service-&gt;variant-free_instance = abap_true.
      _trace_service-&gt;trin_free_instance(
        area_name         = area_name
        inst_name         = inst_name
        client            = l_client
        terminate_changer = terminate_changer
        affect_server     = affect_server
        rc                = rc
      ).
    ENDIF.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="GET_GENERATOR_VERSION" VERSION="1" LANGU="F" DESCRIPT="Query Generator Version" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="GET_GENERATOR_VERSION" SCONAME="GENERATOR_VERSION" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <source>method GET_GENERATOR_VERSION.
  generator_version = _version_.
  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="GET_INSTANCE_INFOS" VERSION="1" LANGU="F" DESCRIPT="Returns the names of all instances" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="GET_INSTANCE_INFOS" SCONAME="INST_NAME" VERSION="1" LANGU="F" DESCRIPT="Name of a Shared Object Instance in an Area" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SHM_INST_NAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="GET_INSTANCE_INFOS" SCONAME="INFOS" VERSION="1" LANGU="F" DESCRIPT="Overview of all Instances of an SHM Area" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SHM_INST_INFOS"/>
   <source>method GET_INSTANCE_INFOS.

  DATA:
    l_client             TYPE shm_client,
    l_client_supplied    TYPE abap_bool VALUE abap_false,
    l_inst_name_supplied TYPE abap_bool VALUE abap_false.


  IF inst_name IS SUPPLIED.
    l_inst_name_supplied = abap_true.
  ENDIF.

* &gt;
  TRY.
      CALL METHOD (&apos;_GET_INSTANCE_INFOS804&apos;)
        EXPORTING
          area_name          = area_name
          client             = l_client
          client_supplied    = l_client_supplied
          client_dependent   = _client_dependent
          life_context       = _life_context
          inst_name          = inst_name
          inst_name_supplied = l_inst_name_supplied
        RECEIVING
          infos              = infos.
    CATCH cx_sy_dyn_call_illegal_method.
*     New kernel and/or new basis SP missing -&gt; use slow fallback
      infos = _get_instance_infos71(
                area_name        = area_name
                client           = l_client
                client_supplied  = l_client_supplied
                client_dependent = _client_dependent
                life_context     = _life_context
              ).
      IF abap_true = l_inst_name_supplied.
        DELETE infos WHERE name &lt;&gt; inst_name.
      ENDIF.
  ENDTRY.
* &lt;

  IF _trace_active = abap_true.
    IF _trace_service-&gt;variant-get_instance_inf = abap_true.
      _trace_service-&gt;trin_get_instance_infos(
        area_name         = area_name
        client            = l_client
        infos             = infos
      ).
    ENDIF.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="CL_SHM_AREA" CMPNAME="GET_ROOT" VERSION="0" EXPOSURE="0" STATE="0" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GET_ROOT.

  DATA:
    l_cx        TYPE REF TO cx_root,
    l_area_name TYPE string,
    l_inst_name TYPE string,
    l_client    TYPE string.

  IF _trace_active = abap_false OR
  _trace_service-&gt;variant-get_root = abap_false.

*   &gt;
    IF is_valid( ) = abap_false.
      l_area_name = me-&gt;area_name.
      l_inst_name = me-&gt;inst_name.
      l_client    = me-&gt;client.
      RAISE EXCEPTION TYPE cx_shm_already_detached
        EXPORTING
          area_name = l_area_name
          inst_name = l_inst_name
          client    = l_client.
    ENDIF.
    root = me-&gt;root.
*   &lt;

  ELSE.

    TRY.

*       &gt;
        IF is_valid( ) = abap_false.
          l_area_name = me-&gt;area_name.
          l_inst_name = me-&gt;inst_name.
          l_client    = me-&gt;client.
          RAISE EXCEPTION TYPE cx_shm_already_detached
            EXPORTING
              area_name = l_area_name
              inst_name = l_inst_name
              client    = l_client.
        ENDIF.
        root = me-&gt;root.
*       &lt;

        _trace_service-&gt;trin_get_root(
          area_name = area_name
        ).

      CLEANUP INTO l_cx.
        _trace_service-&gt;trcx_get_root(
          area_name = area_name
          cx        = l_cx
        ).
    ENDTRY.

  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="INVALIDATE_AREA" VERSION="1" LANGU="F" DESCRIPT="Active versions of all instances will be set to obsolete" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="INVALIDATE_AREA" SCONAME="TERMINATE_CHANGER" VERSION="1" LANGU="F" DESCRIPT="Active writing processes will be ended" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="INVALIDATE_AREA" SCONAME="RC" VERSION="1" LANGU="F" DESCRIPT="Detach Return Value (Constants in CL_SHM_AREA)" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SHM_RC"/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="INVALIDATE_AREA" SCONAME="CX_SHM_PARAMETER_ERROR" VERSION="1" LANGU="F" DESCRIPT="Incorrect parameter transferred" MTDTYPE="0" EDITORDER="1 "/>
   <source>method INVALIDATE_AREA.

  DATA:
    l_client TYPE shm_client,
    l_client_supplied TYPE abap_bool VALUE abap_false.

  CONSTANTS: affect_server TYPE shm_affect_server
             VALUE cl_shm_area=&gt;affect_local_server.


* &gt;
  rc = _invalidate_area71( area_name         = area_name
                           client            = l_client
                           client_supplied   = l_client_supplied
                           client_dependent  = _client_dependent
                           transactional     = _transactional
                           terminate_changer = terminate_changer
                           affect_server     = affect_server
                           life_context      = _life_context ).
* &lt;

  IF _trace_active = abap_true.
    IF _trace_service-&gt;variant-invalidate_area = abap_true.
      _trace_service-&gt;trin_invalidate_area(
        area_name         = area_name
        client            = l_client
        terminate_changer = terminate_changer
        affect_server     = affect_server
        rc                = rc
      ).
    ENDIF.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="INVALIDATE_INSTANCE" VERSION="1" LANGU="F" DESCRIPT="Active version of one instance will be set to obsolete" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="INVALIDATE_INSTANCE" SCONAME="INST_NAME" VERSION="1" LANGU="F" DESCRIPT="Name of a Shared Object Instance of an Area" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SHM_INST_NAME" PARVALUE="CL_SHM_AREA=&gt;DEFAULT_INSTANCE" PAROPTIONL="X" PARPREFERD="X"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="INVALIDATE_INSTANCE" SCONAME="TERMINATE_CHANGER" VERSION="1" LANGU="F" DESCRIPT="Active writing processes will be ended" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="INVALIDATE_INSTANCE" SCONAME="RC" VERSION="1" LANGU="F" DESCRIPT="Detach Return Value (Constants in CL_SHM_AREA)" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SHM_RC"/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="INVALIDATE_INSTANCE" SCONAME="CX_SHM_PARAMETER_ERROR" VERSION="1" LANGU="F" DESCRIPT="Incorrect parameter transferred" MTDTYPE="0" EDITORDER="1 "/>
   <source>method INVALIDATE_INSTANCE.

  DATA:
    l_client TYPE shm_client,
    l_client_supplied TYPE abap_bool value abap_false.

  CONSTANTS: affect_server TYPE shm_affect_server
             VALUE cl_shm_area=&gt;affect_local_server.


* &gt;
  rc = _invalidate_instance71(
    area_name         = area_name
    inst_name         = inst_name
    client            = l_client
    client_supplied   = l_client_supplied
    client_dependent  = _client_dependent
    transactional     = _transactional
    terminate_changer = terminate_changer
    affect_server     = affect_server
    life_context      = _life_context
  ).
* &lt;

  IF _trace_active = abap_true.
    IF _trace_service-&gt;variant-invalidate_inst = abap_true.
      _trace_service-&gt;trin_invalidate_instance(
        area_name         = area_name
        inst_name         = inst_name
        client            = l_client
        terminate_changer = terminate_changer
        affect_server     = affect_server
        rc                = rc
      ).
    ENDIF.
  ENDIF.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="SET_ROOT" VERSION="1" LANGU="F" DESCRIPT="Sets Root Objects" EXPOSURE="2" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="SET_ROOT" SCONAME="ROOT" VERSION="1" LANGU="F" DESCRIPT="Root object" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZCL_TYPE_DEF_AREAHANDLE_ROOT"/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="SET_ROOT" SCONAME="CX_SHM_INITIAL_REFERENCE" VERSION="1" LANGU="F" DESCRIPT="Initial Reference Passed" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_AREA" CMPNAME="SET_ROOT" SCONAME="CX_SHM_WRONG_HANDLE" VERSION="1" LANGU="F" DESCRIPT="Incorrect Handle" MTDTYPE="0" EDITORDER="2 "/>
   <source>method SET_ROOT.

  DATA:
    l_cx TYPE REF TO cx_root.

  IF _trace_active = abap_false OR
  _trace_service-&gt;variant-set_root = abap_false.

*   &gt;
    _set_root( root ).
    me-&gt;root = root.
*   &lt;

  ELSE.

    TRY.

*       &gt;
        _set_root( root ).
        me-&gt;root = root.
*       &lt;
        _trace_service-&gt;trin_set_root(
          area_name         = area_name
          inst_name         = inst_name
          root              = root
        ).

      CLEANUP INTO l_cx.
        _trace_service-&gt;trcx_set_root(
          area_name         = area_name
          inst_name         = inst_name
          root              = root
          cx                = l_cx
        ).
    ENDTRY.

  ENDIF.

  endmethod.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" VERSION="1" LANGU="F" DESCRIPT="Définition de Type - Classe Root (Mémoire partagée)" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" CLSSHAREDMEMORY="X" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <types CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="TY_COMPONENTS_INTERN" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="4 " SRCCOLUMN1="4 " SRCROW2="8 " SRCCOLUMN2="32 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_components_intern,
      name     TYPE string,
      type     TYPE string,
      position TYPE int4,
    END OF   ty_components_intern
"/>
  <types CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="TY_T_COMPONENTS_INTERN" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="10 " SRCCOLUMN1="4 " SRCROW2="11 " SRCCOLUMN2="66 " TYPESRC_LENG="0 " TYPESRC="ty_t_components_intern TYPE STANDARD TABLE OF ty_components_intern
                    WITH NON-UNIQUE KEY primary_key COMPONENTS name
"/>
  <types CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="TY_TYPE_DEFINITION" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="13 " SRCCOLUMN1="4 " SRCROW2="19 " SRCCOLUMN2="30 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF ty_type_definition,
      type         TYPE string,
      kind         TYPE abap_typecategory,
      table_kind   TYPE abap_tablekind,
      table_key    TYPE abap_table_keydescr_tab,
      t_components_intern TYPE ty_t_components_intern,
    END OF   ty_type_definition
"/>
  <types CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="TY_T_TYPE_DEFINITION" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="21 " SRCCOLUMN1="4 " SRCROW2="22 " SRCCOLUMN2="76 " TYPESRC_LENG="0 " TYPESRC="ty_t_type_definition TYPE SORTED TABLE OF ty_type_definition
                                  WITH UNIQUE KEY primary_key COMPONENTS type
"/>
  <implementing CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" REFCLSNAME="IF_SHM_BUILD_INSTANCE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="1 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="MT_TYPE_DEFINITION" VERSION="1" LANGU="F" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TY_T_TYPE_DEFINITION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <interfaceMethod CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CPDNAME="IF_SHM_BUILD_INSTANCE~BUILD">
   <source>METHOD if_shm_build_instance~build.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

ENDMETHOD.</source>
  </interfaceMethod>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="DEFINITION_TYPE_ADD" VERSION="1" LANGU="F" DESCRIPT="Ajout définition d&apos;un Type" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="DEFINITION_TYPE_ADD" SCONAME="IO_DEFINITION" VERSION="1" LANGU="F" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_ABAP_TYPEDESCR"/>
   <source>METHOD definition_type_add.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : DEFINITION_TYPE_ADD                               *
*&amp; Classe          : ZCL_TYPE_DEF_AREAHANDLE_ROOT                      *
*&amp; Description     : Ajout d&apos;une définition de type                    *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_abap_datadescr   TYPE REF TO cl_abap_datadescr,
    lo_abap_tabledescr  TYPE REF TO cl_abap_tabledescr,
    lo_abap_structdescr TYPE REF TO cl_abap_structdescr.

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_type_definition   TYPE zcl_type_def_areahandle_root=&gt;ty_type_definition,
    ls_components_intern TYPE zcl_type_def_areahandle_root=&gt;ty_components_intern.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Création / Modification du type
  &quot; -----------------------------------------------------------

  READ TABLE me-&gt;mt_type_definition WITH TABLE KEY type = io_definition-&gt;absolute_name
                                         ASSIGNING FIELD-SYMBOL(&lt;lfs_s_type_definition&gt;).
  IF sy-subrc NE 0.
    &quot; Le Type n&apos;existe pas
    &quot;&quot;  --&gt; Création d&apos;une nouvelle entrée
    ls_type_definition-type = io_definition-&gt;absolute_name.
    ls_type_definition-kind = io_definition-&gt;kind.
    INSERT ls_type_definition INTO TABLE me-&gt;mt_type_definition ASSIGNING &lt;lfs_s_type_definition&gt;.

  ENDIF.

  &quot; Suivant le type de données
  IF io_definition-&gt;kind EQ cl_abap_typedescr=&gt;kind_elem.
    &quot; Elementaire
    lo_abap_datadescr ?= io_definition.

  ELSEIF io_definition-&gt;kind EQ cl_abap_typedescr=&gt;kind_table
      OR io_definition-&gt;kind EQ cl_abap_typedescr=&gt;kind_struct.
    &quot; Table ou Structure
    IF io_definition-&gt;kind EQ cl_abap_typedescr=&gt;kind_table.
      &quot; Table
      &quot;&quot;  --&gt; Move-Cast dans le bon type
      lo_abap_tabledescr  ?= io_definition.

      &quot;&quot;  --&gt; Récupération des Clefs
      &lt;lfs_s_type_definition&gt;-table_key = lo_abap_tabledescr-&gt;get_keys( ).

      &quot;&quot;  --&gt; Récupération Type de Table
      &lt;lfs_s_type_definition&gt;-table_kind = lo_abap_tabledescr-&gt;table_kind.

      &quot;&quot;  --&gt; Récupération structure utilisé
      lo_abap_structdescr ?= lo_abap_tabledescr-&gt;get_table_line_type( ).

    ELSE.
      &quot; Structure
      lo_abap_structdescr ?= io_definition.

    ENDIF.

    &quot; Récupération des champs
    LOOP AT lo_abap_structdescr-&gt;get_components( ) ASSIGNING FIELD-SYMBOL(&lt;lfs_s_components&gt;).

      CLEAR : ls_components_intern.

      &quot; Initialisation des données
      ls_components_intern-name = &lt;lfs_s_components&gt;-name.
      ls_components_intern-position = sy-tabix.
      ls_components_intern-type = &lt;lfs_s_components&gt;-type-&gt;absolute_name.

*      cl_abap_typedescr=&gt;describe_by_name(
*        EXPORTING
*          p_name         = &lt;lfs_s_components&gt;-type-&gt;absolute_name
*        EXCEPTIONS
*          type_not_found = 1
*          OTHERS         = 2
*      ).
*      IF sy-subrc NE 0 OR &lt;lfs_s_components&gt;-type-&gt;is_ddic_type( ) EQ abap_false.
*        &quot; Encore un type non DDIC
*        &quot;&quot;  --&gt; ToDO : Ajouter traitement récursif ...
*
*      ENDIF.

      &quot; Ajout de l&apos;entrée
      APPEND ls_components_intern TO &lt;lfs_s_type_definition&gt;-t_components_intern.

    ENDLOOP.

    &quot; Tri dans le doute ...
    SORT &lt;lfs_s_type_definition&gt;-t_components_intern BY position.

  ELSE.
    &quot; Autre
    &quot;&quot;  --&gt; Non géré
    RETURN.

  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="DEFINITION_TYPE_EXIST" VERSION="1" LANGU="F" DESCRIPT="La Défintion du Type existe ?" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="DEFINITION_TYPE_EXIST" SCONAME="IV_TYPE" VERSION="1" LANGU="F" DESCRIPT="Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CLIKE" PAROPTIONL="X" PARPREFERD="X"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="DEFINITION_TYPE_EXIST" SCONAME="IO_DEFINITION" VERSION="1" LANGU="F" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="CL_ABAP_TYPEDESCR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="DEFINITION_TYPE_EXIST" SCONAME="RV_FOUND" VERSION="1" LANGU="F" DESCRIPT="Existe ?" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="FLAG"/>
   <source>METHOD DEFINITION_TYPE_EXIST.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : DEFINITION_TYPE_EXIST                             *
*&amp; Classe          : ZCL_TYPE_DEF_AREAHANDLE_ROOT                      *
*&amp; Description     : Détermine si la définition de type existe déjà    *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                            VARIABLES                               **
***------------------------------------------------------------------***
  DATA :
    lv_type TYPE me-&gt;ty_type_definition-type.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; -----------------------------------------------------------
  &quot; Initialisation valeur à utiliser
  &quot; -----------------------------------------------------------

  IF NOT iv_type IS INITIAL.
    &quot; Utilisation du Type
    lv_type = iv_type.

  ELSEIF io_definition IS BOUND.
    &quot; Utiliasation instance
    lv_type = io_definition-&gt;absolute_name.

  ELSE.
    &quot; Aucun paramètre
    &quot;&quot;  --&gt; On retourne Type trouvé.
    rv_found = abap_true.

  ENDIF.

  &quot; -----------------------------------------------------------
  &quot; Initialisation valeur à utiliser
  &quot; -----------------------------------------------------------

  &quot; Recherche si la définition de type existe
  READ TABLE me-&gt;mt_type_definition WITH TABLE KEY type = lv_type
                                      TRANSPORTING NO FIELDS.
  rv_found = boolc( sy-subrc EQ 0 ). &quot;Vrai si Définition Type existe

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="DEFINITION_TYPE_GET" VERSION="1" LANGU="F" DESCRIPT="Récupération définition d&apos;un Type" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="DEFINITION_TYPE_GET" SCONAME="IV_TYPE" VERSION="1" LANGU="F" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CLIKE"/>
   <parameter CLSNAME="ZCL_TYPE_DEF_AREAHANDLE_ROOT" CMPNAME="DEFINITION_TYPE_GET" SCONAME="RO_DEFINITION" VERSION="1" LANGU="F" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_TYPEDESCR"/>
   <source>METHOD definition_type_get.
*&amp;---------------------------------------------------------------------*
*&amp; Méthode         : DEFINITION_TYPE_GET                               *
*&amp; Classe          : ZCL_TYPE_DEF_AREAHANDLE_ROOT                      *
*&amp; Description     : Récupération d&apos;une définition de type             *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Créé par     : Olivier Véhier                                       *
*                                                                      *
*&amp; Créé le      : 22/07/2015                                           *
*                                                                      *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp; Liste des modifications                                             *
*&amp; Auteur      Date       Signature  Objet de la modification          *
*&amp;---------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*                                                                      *

***------------------------------------------------------------------***
**                             TABLES                                 **
***------------------------------------------------------------------***
  DATA :
    lt_key        TYPE abap_keydescr_tab,
    lt_components TYPE cl_abap_structdescr=&gt;component_table.

***------------------------------------------------------------------***
**                            STRUCTURE                               **
***------------------------------------------------------------------***
  DATA :
    ls_key        TYPE         abap_keydescr,
    ls_components TYPE LINE OF cl_abap_structdescr=&gt;component_table.

***------------------------------------------------------------------***
**                            INSTANCES                               **
***------------------------------------------------------------------***
  DATA :
    lo_cx_exception     TYPE REF TO cx_root,
    lo_abap_datadescr   TYPE REF TO cl_abap_datadescr,
    lo_abap_tabledescr  TYPE REF TO cl_abap_tabledescr,
    lo_abap_structdescr TYPE REF TO cl_abap_structdescr.

***------------------------------------------------------------------***
**                          FIELD-SYMBOLS                             **
***------------------------------------------------------------------***
  FIELD-SYMBOLS :
    &lt;lfs_s_table_key&gt; TYPE abap_table_keydescr.

***==================================================================***
**                           TRAITEMENT                               **
***==================================================================***

  &quot; Récupération de la définition du type
  READ TABLE me-&gt;mt_type_definition WITH TABLE KEY type = iv_type
                                         ASSIGNING FIELD-SYMBOL(&lt;lfs_s_type_definition&gt;).
  IF sy-subrc NE 0.
    &quot; Aucune correspondance
    &quot;&quot;  --&gt; Arrêt du traitment
    RETURN.

  ENDIF.

  IF &lt;lfs_s_type_definition&gt;-kind EQ cl_abap_typedescr=&gt;kind_elem.
    &quot; Elementaire
    ro_definition = cl_abap_typedescr=&gt;describe_by_name( p_name = iv_type ).

  ELSEIF &lt;lfs_s_type_definition&gt;-kind EQ cl_abap_typedescr=&gt;kind_table
      OR &lt;lfs_s_type_definition&gt;-kind EQ cl_abap_typedescr=&gt;kind_struct.
    &quot; Table ou Structure

    &quot;&quot;  --&gt; Préparation de la structure
    LOOP AT &lt;lfs_s_type_definition&gt;-t_components_intern ASSIGNING FIELD-SYMBOL(&lt;lfs_s_components_intern&gt;).

      CLEAR : ls_components.

      &quot; Initialisation des données
      ls_components-name = &lt;lfs_s_components_intern&gt;-name.
      ls_components-type ?= cl_abap_datadescr=&gt;describe_by_name( &lt;lfs_s_components_intern&gt;-type ).

      &quot; Ajout de l&apos;entrée
      APPEND ls_components TO lt_components.

    ENDLOOP.

    TRY.
        &quot;&quot;  --&gt; Création de la structure
        lo_abap_structdescr = cl_abap_structdescr=&gt;create( p_components = lt_components ).

        IF &lt;lfs_s_type_definition&gt;-kind EQ cl_abap_typedescr=&gt;kind_table.
          &quot; Table
          &quot;&quot;  --&gt; Conversion dans le type attendu
          lo_abap_datadescr ?= lo_abap_structdescr.

          TRY.
              IF lines( &lt;lfs_s_type_definition&gt;-table_key ) EQ 1.
                &quot; Une seule clef
                READ TABLE &lt;lfs_s_type_definition&gt;-table_key INDEX 1 ASSIGNING &lt;lfs_s_table_key&gt;.
                APPEND &lt;lfs_s_table_key&gt;-name TO lt_key.

                &quot;&quot;  --&gt; Création du type de table
                lo_abap_tabledescr = cl_abap_tabledescr=&gt;create(
                  p_line_type  = lo_abap_datadescr
                  p_table_kind = &lt;lfs_s_type_definition&gt;-table_kind
                  p_unique     = &lt;lfs_s_table_key&gt;-is_unique
                  p_key        = lt_key
                  p_key_kind   = &lt;lfs_s_table_key&gt;-key_kind
                ).

              ELSE.
                &quot; Plusieurs Clefs
                &quot;&quot;  --&gt; Création du type de table avec plusieurs avec Clefs
                lo_abap_tabledescr = cl_abap_tabledescr=&gt;create_with_keys(
                  p_line_type    = lo_abap_datadescr
                  p_keys         = &lt;lfs_s_type_definition&gt;-table_key
               ).

              ENDIF.

            CATCH cx_root.
              &quot; Erreur lors de la création de la table avec les Clefs spécifié
              &quot;&quot;  --&gt; Création de la table sans Clefs
              lo_abap_tabledescr = cl_abap_tabledescr=&gt;create(
                p_line_type  = lo_abap_datadescr
                p_table_kind = &lt;lfs_s_type_definition&gt;-table_kind
              ).

          ENDTRY.

          &quot;&quot;  --&gt; Retourne la définition du type
          ro_definition ?= lo_abap_tabledescr.

        ELSE.
          &quot; Structure
          &quot;&quot;  --&gt; Retourne la définition du type
          ro_definition ?= lo_abap_structdescr.

        ENDIF.

      CATCH cx_root INTO lo_cx_exception.
        &quot; Erreur lors de la création de la structure
        &quot;&quot;  --&gt; Arrêt du traitement
        WHILE lo_cx_exception-&gt;previous IS BOUND. lo_cx_exception = lo_cx_exception-&gt;previous. ENDWHILE.
        RAISE EXCEPTION lo_cx_exception.

    ENDTRY.

  ELSE.
    &quot; Autre
    &quot;&quot;  --&gt; Non géré
    RETURN.

  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCX_TASK" VERSION="1" LANGU="F" DESCRIPT="Classe Exception Tâche" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" MSG_ID="ZTASK" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="CX_DYNAMIC_CHECK">
  <implementing CLSNAME="ZCX_TASK" REFCLSNAME="IF_T100_MESSAGE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZCX_TASK" REFCLSNAME="CX_DYNAMIC_CHECK" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_TASK_MANAGER" VERSION="1" LANGU="F" DESCRIPT="Classe Exception Manager Tâche" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" MSG_ID="ZTASK" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="CX_DYNAMIC_CHECK">
  <implementing CLSNAME="ZCX_TASK_MANAGER" REFCLSNAME="IF_T100_MESSAGE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <inheritance CLSNAME="ZCX_TASK_MANAGER" REFCLSNAME="CX_DYNAMIC_CHECK" VERSION="1" STATE="1"/>
 </CLAS>
 <INTF CLSNAME="ZIF_TASK_CONSTANT" VERSION="1" LANGU="F" DESCRIPT="Interface Tâche" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <types CLSNAME="ZIF_TASK_CONSTANT" CMPNAME="TY_FUNCTION_PARAMETERS" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="10 " SRCCOLUMN2="34 " TYPESRC_LENG="237 " TYPESRC="BEGIN OF ty_function_parameters,
      parameter_name               TYPE        string,
      parameter_data               TYPE REF TO data,
      type_for_none_ddic_parameter TYPE        string,
    END OF   ty_function_parameters
"/>
  <types CLSNAME="ZIF_TASK_CONSTANT" CMPNAME="TY_T_FUNCTION_PARAMETERS" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="12 " SRCCOLUMN1="4 " SRCROW2="13 " SRCCOLUMN2="106 " TYPESRC_LENG="179 " TYPESRC="ty_t_function_parameters TYPE SORTED TABLE OF ty_function_parameters
                                                  WITH NON-UNIQUE KEY primary_key COMPONENTS parameter_name
"/>
  <types CLSNAME="ZIF_TASK_CONSTANT" CMPNAME="TY_TASK_ATTACHED_DATA" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="15 " SRCCOLUMN1="4 " SRCROW2="18 " SRCCOLUMN2="33 " TYPESRC_LENG="131 " TYPESRC="BEGIN OF ty_task_attached_data,
      name TYPE        string,
      data TYPE REF TO data,
    END OF   ty_task_attached_data
"/>
  <types CLSNAME="ZIF_TASK_CONSTANT" CMPNAME="TY_T_TASK_ATTACHED_DATA" VERSION="1" LANGU="F" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="20 " SRCCOLUMN1="4 " SRCROW2="21 " SRCCOLUMN2="81 " TYPESRC_LENG="152 " TYPESRC="ty_t_task_attached_data TYPE SORTED TABLE OF ty_task_attached_data
                                       WITH UNIQUE KEY primary_key COMPONENTS name
"/>
  <typeUsage CLSNAME="ZIF_TASK_CONSTANT" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <attribute CLSNAME="ZIF_TASK_CONSTANT" CMPNAME="MC_MESSAGE_CLASS_ID" VERSION="1" LANGU="F" DESCRIPT="Domaine fonctionnel" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;ZTASK&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ARBGB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZIF_TASK_CONSTANT" CMPNAME="MC_PARAMETER_KIND_CHANGING" VERSION="1" LANGU="F" DESCRIPT="Changing" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="ABAP_FUNC_CHANGING" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND-KIND" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZIF_TASK_CONSTANT" CMPNAME="MC_PARAMETER_KIND_EXCEPTION" VERSION="1" LANGU="F" DESCRIPT="Exception" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;99&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND-KIND" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZIF_TASK_CONSTANT" CMPNAME="MC_PARAMETER_KIND_EXPORTING" VERSION="1" LANGU="F" DESCRIPT="Exporting" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="ABAP_FUNC_EXPORTING" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND-KIND" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZIF_TASK_CONSTANT" CMPNAME="MC_PARAMETER_KIND_IMPORTING" VERSION="1" LANGU="F" DESCRIPT="Importing" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="ABAP_FUNC_IMPORTING" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND-KIND" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZIF_TASK_CONSTANT" CMPNAME="MC_PARAMETER_KIND_TABLES" VERSION="1" LANGU="F" DESCRIPT="Tables" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="ABAP_FUNC_TABLES" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_FUNC_PARMBIND-KIND" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 </INTF>
 <TABL TABNAME="ZTEC_S_TASK_PROCESS_BY_FORM" DDLANGUAGE="F" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Tâche - Traitement par Routine" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZTEC_S_TASK_PROCESS_BY_FORM" FIELDNAME="REPID" DDLANGUAGE="F" POSITION="0001" ROLLNAME="REPID" ADMINFIELD="0" INTTYPE="C" INTLEN="000080" DOMNAME="PROGNAME" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000040" OUTPUTLEN="000040" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Nom du programme ABAP" REPTEXT="Programme" SCRTEXT_S="Programme" SCRTEXT_M="Nom programme" SCRTEXT_L="Nom du programme" DOMNAME3L="PROGNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_TASK_PROCESS_BY_FORM" FIELDNAME="FORM" DDLANGUAGE="F" POSITION="0002" ROLLNAME="FORMID" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="CHAR30" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="20" SCRLEN3="30" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Nom d&apos;une routine FORM" REPTEXT="Nom de la routine FORM" SCRTEXT_S="Nom FORM" SCRTEXT_M="Nom routine FORM" SCRTEXT_L="Nom de la routine FORM" DOMNAME3L="CHAR30" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZTEC_S_TASK_PROCESS_BY_METHOD" DDLANGUAGE="F" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Tâche - Traitement par Méthode" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZTEC_S_TASK_PROCESS_BY_METHOD" FIELDNAME="INSTANCE" POSITION="0001" ROLLNAME="OBJECT" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="REF" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  REF RO" MASKLEN="0000" DEPTH="00" COMPTYPE="R" REFTYPE="O" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_TASK_PROCESS_BY_METHOD" FIELDNAME="METHOD" DDLANGUAGE="F" POSITION="0002" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DDTEXT="Méthode à appeler" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZTEC_S_TASK_CALL_FUNCTION" DDLANGUAGE="F" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Données pour appel Module Fonction" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZTEC_S_TASK_CALL_FUNCTION" FIELDNAME="FUNCTION_NAME" DDLANGUAGE="F" POSITION="0001" ROLLNAME="FUNCNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="FUNCNAME" ROUTPUTLEN="000000" MEMORYID="LIB" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="TFDIR" MASK="  CHARE" MASKLEN="0000" DDTEXT="Nom de fonction" DOMNAME3L="FUNCNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_TASK_CALL_FUNCTION" FIELDNAME="T_FUNCTION_PARAMETERS" DDLANGUAGE="F" POSITION="0002" ROLLNAME="ZTEC_T_FUNCTION_PARAMETERS" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Type de table paramètre d&apos;appel Statique" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZTEC_S_TASK_CALL_METHOD" DDLANGUAGE="F" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Données pour appel Méthode" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZTEC_S_TASK_CALL_METHOD" FIELDNAME="CLASS_NAME" DDLANGUAGE="F" POSITION="0001" ROLLNAME="SEOCLSNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="SEOCLSNAME" ROUTPUTLEN="000000" MEMORYID="CLASS" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Nom de type d&apos;objet" REPTEXT="Nom de type d&apos;objet" SCRTEXT_S="Type objet" SCRTEXT_M="Nom type objet" SCRTEXT_L="Classe/Interface" DOMNAME3L="SEOCLSNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_TASK_CALL_METHOD" FIELDNAME="METHOD_NAME" DDLANGUAGE="F" POSITION="0002" ROLLNAME="SEOCPDNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000122" DOMNAME="CHAR61" ROUTPUTLEN="000000" HEADLEN="61" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000061" OUTPUTLEN="000061" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Nom de composante complet" REPTEXT="Composante d&apos;interface" SCRTEXT_S="Comp. int." SCRTEXT_M="Comp. interface" SCRTEXT_L="Composante interface" DOMNAME3L="CHAR61" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_TASK_CALL_METHOD" FIELDNAME="T_METHOD_PARAMETERS" DDLANGUAGE="F" POSITION="0003" ROLLNAME="ZTEC_T_METHOD_PARAMETERS" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Méthode : Type de table paramétres d&apos;appel Statique" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZTEC_S_CONTENT_DATA" DDLANGUAGE="F" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Structure contenu des données - statiques" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZTEC_S_CONTENT_DATA" FIELDNAME="SUB_DATA_GUID" DDLANGUAGE="F" POSITION="0001" ROLLNAME="SYSUUID_C32" ADMINFIELD="0" INTTYPE="C" INTLEN="000064" DOMNAME="SYSUUID_C32" ROUTPUTLEN="000000" HEADLEN="04" SCRLEN1="04" SCRLEN2="04" SCRLEN3="04" DTELMASTER="D" DATATYPE="CHAR" LENG="000032" OUTPUTLEN="000032" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="16 Byte UUID in 32 Characters (Hexadecimal Encoded)" REPTEXT="UUID" SCRTEXT_S="UUID" SCRTEXT_M="UUID" SCRTEXT_L="UUID" DOMNAME3L="SYSUUID_C32" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_CONTENT_DATA" FIELDNAME="LINE" DDLANGUAGE="F" POSITION="0002" ROLLNAME="SYST_TABIX" ADMINFIELD="0" INTTYPE="X" INTLEN="000004" DOMNAME="SYST_LONG" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="20" SCRLEN3="20" DTELMASTER="D" DATATYPE="INT4" LENG="000010" OUTPUTLEN="000011" DECIMALS="000000" SIGNFLAG="X" MASK="  INT4E" MASKLEN="0000" DDTEXT="Zone système ABAP : index de ligne de tables internes" REPTEXT="Ligne" SCRTEXT_S="Ligne" SCRTEXT_M="Entrée de table" SCRTEXT_L="Entrée de table" DOMNAME3L="SYST_LONG" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_CONTENT_DATA" FIELDNAME="FIELDNAME" DDLANGUAGE="F" POSITION="0003" ROLLNAME="FIELDNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="FDNAME" ROUTPUTLEN="000000" MEMORYID="DFD" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="18" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD03L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Nom de zone" REPTEXT="Nom zone" SCRTEXT_S="Zone" SCRTEXT_M="Nom de zone" SCRTEXT_L="Nom de zone" DOMNAME3L="FDNAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_CONTENT_DATA" FIELDNAME="FIELDTYPE" DDLANGUAGE="F" POSITION="0004" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_CONTENT_DATA" FIELDNAME="FIELDKIND" DDLANGUAGE="F" POSITION="0005" ROLLNAME="TYPEKIND" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" DOMNAME="TYPEKIND" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="03" SCRLEN2="16" SCRLEN3="16" DTELMASTER="D" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Catégorie du type de dictionnaire" REPTEXT="Cat" SCRTEXT_S="Cat" SCRTEXT_M="Cat. type (codé)" SCRTEXT_L="Cat. type (codé)" DOMNAME3L="TYPEKIND" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_CONTENT_DATA" FIELDNAME="VALUE" DDLANGUAGE="F" POSITION="0006" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZTEC_S_FUNCTION_PARAMETERS" DDLANGUAGE="F" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Structure paramétres d&apos;appel statique" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZTEC_S_FUNCTION_PARAMETERS" FIELDNAME="PARAMETER_NAME" DDLANGUAGE="F" POSITION="0001" ROLLNAME="PARAMETER" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="LPARAMETER" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Nom du paramètre" REPTEXT="Nom de paramètre" SCRTEXT_S="Nom param." SCRTEXT_M="Nom paramètre" SCRTEXT_L="Nom de paramètre" DOMNAME3L="LPARAMETER" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_FUNCTION_PARAMETERS" FIELDNAME="PARAMETER_KIND" DDLANGUAGE="F" POSITION="0002" ROLLNAME="SRAL_PARAM_KIND_RFC" ADMINFIELD="0" INTTYPE="X" INTLEN="000001" DOMNAME="SRAL_PARAM_KIND_RFC" ROUTPUTLEN="000000" HEADLEN="09" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="E" DATATYPE="INT1" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" VALEXI="X" MASK="  INT1E" MASKLEN="0000" DDTEXT="RAL : type de paramètre RFC" REPTEXT="Paramètre" SCRTEXT_S="Paramètre" SCRTEXT_M="Paramètre" SCRTEXT_L="Paramètre" DOMNAME3L="SRAL_PARAM_KIND_RFC" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_FUNCTION_PARAMETERS" FIELDNAME="VALUE_TYPE" DDLANGUAGE="F" POSITION="0003" ROLLNAME="RS38L_TYP" ADMINFIELD="0" INTTYPE="C" INTLEN="000264" DOMNAME="RS38L_TYP" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000132" OUTPUTLEN="000132" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Type de référence d&apos;un paramètre d&apos;interface" REPTEXT="Type réf." SCRTEXT_S="Type réf." SCRTEXT_M="Type réf." SCRTEXT_L="Type réf." DOMNAME3L="RS38L_TYP" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_FUNCTION_PARAMETERS" FIELDNAME="VALUE_KIND" DDLANGUAGE="F" POSITION="0004" ROLLNAME="TYPEKIND" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" DOMNAME="TYPEKIND" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="03" SCRLEN2="16" SCRLEN3="16" DTELMASTER="D" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Catégorie du type de dictionnaire" REPTEXT="Cat" SCRTEXT_S="Cat" SCRTEXT_M="Cat. type (codé)" SCRTEXT_L="Cat. type (codé)" DOMNAME3L="TYPEKIND" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_FUNCTION_PARAMETERS" FIELDNAME="VALUE_DATA" DDLANGUAGE="F" POSITION="0005" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_FUNCTION_PARAMETERS" FIELDNAME="VALUE_DATA_XML" DDLANGUAGE="F" POSITION="0006" ADMINFIELD="0" INTTYPE="y" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="RSTR" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  RSTR" MASKLEN="0000" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TABL TABNAME="ZTEC_S_METHOD_PARAMETERS" DDLANGUAGE="F" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Méthode : Structure paramétre d&apos;appel Statique" AUTHCLASS="00" PROZPUFF="000" EXCLASS="1">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZTEC_S_METHOD_PARAMETERS" FIELDNAME="PARAMETER_NAME" DDLANGUAGE="F" POSITION="0001" ROLLNAME="SEOSCONAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000060" DOMNAME="CHAR30" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Nom de sous-composante" REPTEXT="Sous-composante" SCRTEXT_S="Sous-comp." SCRTEXT_M="Sous-composante" SCRTEXT_L="Sous-composante" DOMNAME3L="CHAR30" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_METHOD_PARAMETERS" FIELDNAME="PARAMETER_KIND" DDLANGUAGE="F" POSITION="0002" ROLLNAME="SEOPARDECL" ADMINFIELD="0" INTTYPE="N" INTLEN="000002" DOMNAME="SEOPARDECL" ROUTPUTLEN="000000" HEADLEN="01" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="NUMC" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Type de déclaration paramètre (depuis vue utilisateur)" REPTEXT="D" SCRTEXT_S="Type décl." SCRTEXT_M="T. déclaration" SCRTEXT_L="Ty. décl. paramètr." DOMMASTER="D" DOMNAME3L="SEOPARDECL" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_METHOD_PARAMETERS" FIELDNAME="VALUE_TYPE" DDLANGUAGE="F" POSITION="0003" ROLLNAME="RS38L_TYP" ADMINFIELD="0" INTTYPE="C" INTLEN="000264" DOMNAME="RS38L_TYP" ROUTPUTLEN="000000" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000132" OUTPUTLEN="000132" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Type de référence d&apos;un paramètre d&apos;interface" REPTEXT="Type réf." SCRTEXT_S="Type réf." SCRTEXT_M="Type réf." SCRTEXT_L="Type réf." DOMNAME3L="RS38L_TYP" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_METHOD_PARAMETERS" FIELDNAME="VALUE_KIND" DDLANGUAGE="F" POSITION="0004" ROLLNAME="TYPEKIND" ADMINFIELD="0" INTTYPE="C" INTLEN="000002" DOMNAME="TYPEKIND" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="03" SCRLEN2="16" SCRLEN3="16" DTELMASTER="D" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASK="  CHARE" MASKLEN="0000" DDTEXT="Catégorie du type de dictionnaire" REPTEXT="Cat" SCRTEXT_S="Cat" SCRTEXT_M="Cat. type (codé)" SCRTEXT_L="Cat. type (codé)" DOMNAME3L="TYPEKIND" SHLPORIGIN="F" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_METHOD_PARAMETERS" FIELDNAME="VALUE_DATA" DDLANGUAGE="F" POSITION="0005" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  STRG" MASKLEN="0000" DDTEXT="Valeur" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
  <dd03p TABNAME="ZTEC_S_METHOD_PARAMETERS" FIELDNAME="VALUE_DATA_XML" DDLANGUAGE="F" POSITION="0006" ADMINFIELD="0" INTTYPE="y" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="RSTR" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  RSTR" MASKLEN="0000" DDTEXT="XML (pour type complexe)" DEPTH="00" EXCLASS="0" DBPOSITION="0000" OUTPUTSTYLE="00" STRORLOCPOS="00"/>
 </TABL>
 <TTYP TYPENAME="ZTEC_T_CONTENT_DATA" DDLANGUAGE="F" ROWTYPE="ZTEC_S_CONTENT_DATA" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="S" KEYDEF="K" KEYKIND="U" KEYFDCOUNT="0003" DDTEXT="Table contenu de données - statiques" TYPELEN="000148" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000">
  <dd42v TYPENAME="ZTEC_T_CONTENT_DATA" KEYFDPOS="0001" ROWTYPEPOS="0001" KEYFIELD="SUB_DATA_GUID"/>
  <dd42v TYPENAME="ZTEC_T_CONTENT_DATA" KEYFDPOS="0002" ROWTYPEPOS="0002" KEYFIELD="LINE"/>
  <dd42v TYPENAME="ZTEC_T_CONTENT_DATA" KEYFDPOS="0003" ROWTYPEPOS="0003" KEYFIELD="FIELDNAME"/>
 </TTYP>
 <TTYP TYPENAME="ZTEC_T_FUNCTION_PARAMETERS" DDLANGUAGE="F" ROWTYPE="ZTEC_S_FUNCTION_PARAMETERS" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Type de table paramètre d&apos;appel Statique" TYPELEN="000344" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZTEC_T_METHOD_PARAMETERS" DDLANGUAGE="F" ROWTYPE="ZTEC_S_METHOD_PARAMETERS" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Méthode : Type de table paramétres d&apos;appel Statique" TYPELEN="000344" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
</nugget>
